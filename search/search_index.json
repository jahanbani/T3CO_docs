{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#t3co-transportation-technology-total-cost-of-ownership-tool","title":"T3CO : Transportation Technology Total Cost of Ownership Tool","text":"<p>This documentation website is intended for beta-testers of the t3co-2.0 branch and will be taken down after the full release of T3CO v2.0.0</p>"},{"location":"#description","title":"Description","text":"<p>This repo houses T3CO (Transportation Technology Total Cost of Ownership), software for modeling total cost of ownership for commercial vehicles with advanced powertrains.</p> <p>To learn about the models, go to the Overview</p> <p>To get started with the tool, go to the Installation Guide</p> <p>To run your first analysis after installing T3CO, go to the Quick Start Guide</p>"},{"location":"#usage","title":"Usage","text":"<p>T3CO is a general framework allowing a user to determine the total cost of ownership (TCO) of a vehicle (sometimes a FASTSim vehicle model paired with drivecycle(s) for determining fuel efficiency). The user can also determine performance of gradeability, acceleration, and range. In addition to straight TCO computation there is also the option to optimize a vehicle powertrain such that it meets performance optional targets while also optionally minimizing TCO.</p>"},{"location":"T3CO_Overview/","title":"Overview","text":""},{"location":"T3CO_Overview/#t3co-introduction","title":"T3CO Introduction","text":"<p>NREL's Transportation Technology Total Cost of Ownership (T3CO) tool enables levelized assessments of the full life cycle costs of current and advanced technology commercial vehicles.</p>"},{"location":"T3CO_Overview/#code-flow","title":"Code Flow","text":"<p>Generally speaking, T3CO can be used in two ways:</p> <ul> <li> <p>The first option generates total cost of ownership (TCO) and performance metrics for a pre-defined vehicle.</p> </li> <li> <p>The second option optimizes a vehicle's component specifications to achieve the lowest total cost of ownership possible while meeting performance objectives. Since optimization requires gathering TCO and performance metrics during each step of optimization, it essentially is an expansion of the first option for using T3CO.</p> </li> </ul>"},{"location":"T3CO_Overview/#generating-tco-and-performance","title":"Generating TCO and performance","text":"<p>There are a few main components of a vehicle's total cost of ownership: MSRP (the cost of the vehicle at time of purchase), fuel costs (based on $ per gallon of gasoline equivalent for every operational year's fuel used, other operating costs maintenance [\\$/mile]), fueling dwell time labor [\\$/hr], opportunity cost for payload loss and downtime, and resale value at end of ownership.</p> <p>Fuel costs are computed after determining the vehicle energy efficiency (e.g. miles per gallon of fuel) and factoring in the annual miles driven and the fuel price for each year and region where the vehicle operates. The performance metrics estimated for the vehicle are: miles of range, acceleration time, and gradeability.</p> <p>More details on performance metrics are included below under optimization flow. If the analysis does not include optimization, these metrics are simply reported in the results.</p>"},{"location":"T3CO_Overview/#t3co-input-files","title":"T3CO Input Files","text":"<p>There are three main files that form the basis of T3CO TCO calculations and T3CO optimizations. The first is the Vehicle File which provides vehicle model inputs for FASTSim simulation. The second type of file is the T3CO input file, or Scenario File, which specifies the cost assumption parameters for the TCO calculation. These include technology cost assumptions (e.g. $ per kilowatt for engine or motor size), operating conditions, (e.g. annual VMT and geographic region), financial inputs (e.g. operating years and discount rate), analysis option controls (e.g. whether to optimize the vehicle or not), and performance requirements if optimizing (e.g. range, grade and acceleration targets). The third file is the Config File, which provides an easier way to manage analyses with minimal command line inputs, containing overrides for major scenario input parameters.</p> <p>T3CO provides some example Vehicle and Scenario models to assist the user in getting started. There are demo versions of the Vehicle file and Scenario file available in the <code>src/t3co/resources/inputs/</code> folder. The Config file is available in the <code>t3co.resources</code> module folder. They are also available in the demo_inputs folder if the <code>install_t3co_demo_inputs</code> command is used to copy the required input files to your local directory.</p>"},{"location":"T3CO_Overview/#optimization-flow","title":"Optimization Flow","text":"<p>The TCO &amp; Performance metric targets described below are the core of the optimization loop. T3CO has the capability to take vehicle specifications, such as engine size, motor size, battery size, coefficient of aerodynamic drag, vehicle weight, etc. and modify them in order to find the set of specifications that yields the lowest TCO while still meeting minimum performance requirements in acceleration, grade and range. Adjusting these vehicle specifications impacts the vehicle\u2019s MSRP and also, by changing its energy consumption per mile, its operating costs. If including engine efficiency, aerodynamic drag, and light-weighting in the optimization, additional input files are required to specify the cost of improving these features.</p> <p>Optimization is handled in the optimization module, inheriting from the PyMOO module.</p>"},{"location":"T3CO_Overview/#performance-constraints","title":"Performance Constraints","text":"<p>The user must specify targets for the following performance metrics to constrain the optimization</p> <ul> <li> <p>Gradeability is the measure of the vehicle's max speed achieved at 1.25 and 6 percent grades, while the vehicle is operating at max allowable GVWR (including EV weight credit kilograms)</p> </li> <li> <p>Acceleration is the measure of the time in seconds the vehicle takes to reach 30 miles per hour and 60 miles per hour. This constraint can be specified at max allowable GVWR or calculated vehicle weight using input payload.</p> </li> <li> <p>Range is the computation of the vehicle's range in miles based on the computed fuel efficiency (MPGGE - miles per gallon gasoline equivalent) and vehicle fuel or energy storage; MPGGE is attained using a design cycle (cycle or cycles determined to be representative of vehicle operation). The design cycle can be a single drive cycle or a weighted composite of multiple drive cycles.</p> </li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#setting-up-a-python-environment","title":"Setting Up a Python Environment","text":"<p>T3CO depends on Python&gt;=3.9 and &lt;=3.10. To create an environment containing the appropriate Python version and a built-in <code>pip</code>, there are two preferred ways:</p> <ol> <li> <p>First option is to use conda:</p> <p>if using Windows PowerShell, run an additional from Anaconda Prompt to enable conda capabilities:</p> Bash<pre><code>conda init powershell\n</code></pre> <p>To create a python environment run,</p> Bash<pre><code>conda create -n t3co python=3.10\nconda activate t3co\n</code></pre> </li> <li> <p>The other option is using venv</p> Bash<pre><code>python3.10 -m venv t3co\n</code></pre> <p>On macOS/Linux, activate the environment:</p> Bash<pre><code>source t3co/bin/activate\n</code></pre> <p>On Windows Powershell:</p> Bash<pre><code>t3co\\Scripts\\activate\n</code></pre> </li> </ol>"},{"location":"installation/#installing-t3co-python-package","title":"Installing T3CO Python Package","text":"<p>T3CO is available on PyPI and as a public access GitHub repository. This gives the user two sources from where T3CO Python Package can be obtained and installed.</p>"},{"location":"installation/#installation-extras","title":"Installation 'Extras'","text":"<p>The user can choose one of three installation options or 'extras' of T3CO based on their desired tool capabilities. </p> <ul> <li>T3CO as a pure cost estimation tool with exogenous inputs for energy terms (default version <code>t3co</code> - requires Python&gt;=3.9, &lt;=3.13)</li> <li>T3CO integrated with FASTSim for energy simulation (<code>t3co[fastsim]</code>, requires Python&gt;=3.9,&lt;=3.10)</li> <li>T3CO for developers and quality testers that includes all capabilities (<code>t3co[dev]</code> requires Python&gt;=3.9,&lt;=3.10)</li> </ul> <p>The different 'extras' refers to different sets of dependencies that get installed along with T3CO when the user runs these commands. Dependencies don't need to be manually installed since Poetry is used as the dependency manager.</p> <p>To install a specific released version (for example T3CO v1.0.8): Bash<pre><code>pip install t3co==1.0.8\n</code></pre></p>"},{"location":"installation/#installation-source-1-from-pypi","title":"Installation Source #1: From PyPI","text":"<p>After creating a version-appropriate Python environment, the latest release of T3CO can be installed from PyPI using one of the following commands.</p> <p>For the default option/extra:</p> Bash<pre><code>pip install t3co\n</code></pre> <p>For the FASTSim-integrated 'extra':</p> Bash<pre><code>pip install t3co[fastsim]\n</code></pre> <p>For the developer 'extra':</p> Bash<pre><code>pip install t3co[dev]\n</code></pre>"},{"location":"installation/#installation-source-2-cloning-the-github-repo","title":"Installation Source #2: Cloning the GitHub Repo","text":"<p>T3CO can also be installed from a clone of the GitHub repository.</p> <p>First, clone the repository from GitHub from your desired directory (eg., /Users/Projects/):</p> Bash<pre><code>git clone https://github.com/NREL/T3CO.git T3CO\n</code></pre> <p>This creates a git compliant folder 'T3CO' (i.e., a '/Users/Projects/T3CO' folder)</p> <p>To access the <code>t3co-2.0</code> branch,</p> Bash<pre><code>git checkout t3co-2.0\n</code></pre> <p>GitHub Desktop is an application that provides a GUI for managing git clones. It gives the user a more interactive way of cloning a repo and switching branches. This option negates the need for<code>git clone</code> and a <code>git checkout</code> commands.</p> <p>From within the Python environment, navigate to the parent directory containing the T3CO repository (run <code>cd T3CO</code>) and run one of these three installation options:</p> <p>For the default option/extra:</p> Bash<pre><code>pip install -e .\n</code></pre> <p>For the FASTSim-integrated 'extra':</p> Bash<pre><code>pip install -e .[fastsim]\n</code></pre> <p>For the developer 'extra':</p> Bash<pre><code>pip install -e .[dev]\n</code></pre>"},{"location":"installation/#post-installation-checks","title":"Post-Installation Checks","text":"<p>Check that the right version of T3CO is installed in your environment:</p> Bash<pre><code>pip show t3co\n</code></pre> <p>If there are updates or new releases to T3CO that don't show in the local version when installing from a git clone, use a <code>git pull</code> command on the latest version from the <code>main</code> branch on the repo:</p> Bash<pre><code>git pull origin main\n</code></pre> <p>Here 'main' can be replaced by the desired branch.</p>"},{"location":"installation/#copying-t3co-demo-input-files","title":"Copying T3CO Demo Input Files","text":"<p>The <code>t3co.resources</code> module contains all the necessary input files needed for running T3CO. However, it is sometimes difficult to navigate to these files when installing. To help with this, run this command on the Command Line Interface.</p> Bash<pre><code>install_t3co_demo_inputs\n</code></pre> <p>The user will receive these questions on the command line:</p> <p><code>Do you want to copy the T3CO demo input files? (y/n):</code></p> <p><code>Enter the path where you want to copy demo input files:</code></p> <p>Choose <code>y</code> and provide the desired destination path to get a <code>demo_inputs</code> folder containing the <code>t3co.resources</code> module files copied to your local directory. To copy the folder to the current directory you are on, answer the second question with \".\".</p>"},{"location":"installation/#running-your-first-analysis","title":"Running your first analysis","text":"<p>To learn about the tool and run your first T3CO analysis, proceed to the Quick Start Guide</p>"},{"location":"quick_start/","title":"Quick Start Guide to T3CO","text":"<p>A total-cost analysis is only as good as its inputs. Generating T3CO results requires equal parts of investment in inputs gathering as it is in running the tool. To make things easier, we provide 500+ demo scenarios for the user to choose from to run T3CO.</p>"},{"location":"quick_start/#inputs","title":"Inputs","text":"<p>T3CO contains three main input files and several auxiliary files that are referenced in the main files for different purposes.</p>"},{"location":"quick_start/#vehicle-scenario-and-config","title":"Vehicle, Scenario, and Config","text":"<p>The main input files are the Vehicle, Scenario, and Config. T3CO provides users with demo input files to get started. One or more Vehicle-Scenario pair selections are necessary to run T3CO:</p> <ul> <li>Vehicle contains sets of FASTSim vehicle input parameters that define the powertrain and vehicle dynamics of the selected Vehicle-Scenario pair. Each entry in the Vehicle file is called a \"Vehicle Model\" and is referenced using <code>vehicle.selection</code> as a key. [Demo Vehicles]</li> <li>Scenario contains cost, infrastructure, and optimization related input parameters that define a certain scenario. Each entry in the Scenario file is called a \"Scenario Model\" and is referenced using <code>scenario.selection</code> as a key. [Demo Scenarios]</li> <li>Config contains easy ways to manage T3CO model settings and to save the inputs needed to run a set of selections of Vehicle-Scenario pairs. It also contains paths to various input files and some Scenario parameter overrides to be used globally on all selections. Users can also specify a path to the output directory in which T3CO results need to be saved. Each entry in the Config file refers to an \"Analysis\" and is accessed using <code>config.analysis_id</code> [Demo Analyses]</li> </ul> <p>Note that <code>scenario.selection</code> and <code>vehicle.selection</code> are expected by the tool to be the same for a chosen Vehicle-Scenario pair, i.e., a row on the Scenario file has a corresponding row on the Vehicle file with the same <code>selection</code> key. The <code>config.selections</code> attribute accepts a list of \"selection\" (that refers to both <code>scenario.selection</code> and <code>vehicle.selection</code>) and is used to fetch the desired set of inputs to run.</p>"},{"location":"quick_start/#auxiliary-inputs","title":"Auxiliary Inputs","text":"<p>The auxiliary input files in the <code>t3co/resources/auxiliary/</code> folder include <code>FuelPrices.csv</code>, <code>ResidualValues.csv</code>, <code>AeroDragImprovementCostCurve.csv</code>, <code>LightweightImprovementCostCurve.csv</code>, and <code>EngineEffImprovementCostCurve.csv</code>. These files contain important cost and model assumptions that are necessary to run different aspects of the T3CO cost models. Users can select the default auxiliary input files and choose the relevant set of assumptions. They can also add new entries to these files, or create their own auxiliary input files and mention the new paths in the Config file.</p>"},{"location":"quick_start/#running-t3co","title":"Running T3CO","text":"<p>After checking the inputs and creating/modifying an \"Analysis\" on the Config file, the next step is to execute the models. The <code>t3co/cli/sweep.py</code> module is the main script that needs to be run to perform a TCO analysis. And the most effective way to run the sweep module is to call a specific \"Analysis\" from the Config file using the <code>config.analysis_id</code> key.</p>"},{"location":"quick_start/#running-the-sweep-module-from-a-pypi-installed-t3co","title":"Running the Sweep Module from a PyPI-installed T3CO","text":"<p>The easiest way to run the <code>t3co.cli.sweep</code> module is to use a local copy of the demo input files. If the <code>install_t3co_demo_inputs</code> command is used to copy <code>demo_inputs</code> to your local directory after installing from PyPI, run the <code>t3co.cli.sweep</code> module from any directory. </p> <p>Bash<pre><code>python -m t3co.cli.sweep --analysis-id=0 --config=&lt;path/to/demo_inputs/T3COConfig.csv&gt;\n</code></pre> Point <code>--config</code> to the <code>T3COConfig.csv</code> file path and <code>--analysis-id</code> to the desired <code>config.analysis_id</code> (either an existing one or a newly added \"Analysis\" in the <code>demo_inputs/T3COConfig.csv</code> file. Default = <code>0</code>).</p>"},{"location":"quick_start/#running-sweep-module-from-a-cloned-github-repo","title":"Running Sweep Module from a Cloned Github repo","text":"<p>For running <code>config.analysis_id</code>=0 (or a user desired \"Analysis\") from the Demo Config file on a cloned GitHub repo, run these commands from the parent directory:</p> Bash<pre><code>python -m t3co.cli.sweep --analysis-id=0\n</code></pre>"},{"location":"quick_start/#running-t3co-in-batch-mode-using-multiprocessing","title":"Running T3CO in Batch Mode (using multiprocessing)","text":"<p>The user can run T3CO in a \"Batch Mode\", which may be useful when running a large number of Vehicle-Scenario pairs or a large number of drivecycles or both. T3CO provides a demo analysis (<code>config.analysis_id</code>=3 in the sample T3COConfig.csv file) that runs the Batch Mode for a folder of multiple input drivecycles.</p> Bash<pre><code>python -m t3co.cli.sweep --analysis-id=3 --run-multi\n</code></pre> <p>The Batch Mode allows T3CO to run parallel analyses utilizing multiple processors (or CPU cores) denoted by CLI argument <code>--n-processors</code>(defaults to 9). Adjust this number accordingly. To get the fastest run time, close other processor intensive programs running on your computer and assign <code>--n-processors</code> as one or two less than the max number of cores.</p> <p>When a folder path is provided in the T3COConfig.csv file (<code>config.drive_cycle</code>) containing \"n\" number of valid drivecycles, T3CO generates \"n\" scenarios for each Vehicle selections mentioned in <code>config.selections</code> with the <code>scenario.drive_cycle</code> populated with each of the \"n\" drivecycles. For Vehicle selection \"1\" in config.selections, the generated selection numbers are denoted by \"1_000\" for the first drivecycle, \"1_001\" for the second drivecycle, and so on.</p>"},{"location":"quick_start/#running-t3co-demo","title":"Running T3CO Demo","text":"<p>T3CO presents a demo file (<code>src/t3co/demos/demo.py</code>) for generating a <code>TCOCalc</code> for a specific year and a <code>Ledger</code> object for a given vehicle, scenario, and energy inputs. It showcases the modularity of the tool and allows the user to also download the results as a JSON or CSV file.</p>"},{"location":"quick_start/#other-command-line-interface-arguments","title":"Other Command Line Interface arguments","text":"<p>Use the command below to get a list of all CLI arguments: Bash<pre><code>python -m t3co.cli.sweep --help\n</code></pre></p> Text Only<pre><code>$ python -m t3co.cli.sweep --help\nusage: SWEEP [-h] [--config CONFIG] [--analysis-id ANALYSIS_ID] [--vehicles VEHICLES] [--scenarios SCENARIOS] [--selections [SELECTIONS ...]] [--drive-cycle [DRIVE_CYCLE ...]]\n             [--eng-curves ENG_CURVES] [--lw-curves LW_CURVES] [--aero-curves AERO_CURVES] [--look-for LOOK_FOR] [--skip-all-opt] [--skip-input-validation] [--exclude [EXCLUDE ...]]\n             [--algorithms [ALGORITHMS ...]] [--dst-dir DST_DIR] [--dir-mark DIR_MARK] [--file-mark FILE_MARK] [--skip-save-veh] [--x-tol X_TOL] [--f-tol F_TOL] [--n-max-gen N_MAX_GEN]\n             [--pop-size POP_SIZE] [--nth-gen NTH_GEN] [--n-last N_LAST] [--range-overshoot-tol RANGE_OVERSHOOT_TOL] [---missed-trace-correction] [--max-time-dilation MAX_TIME_DILATION]\n             [--min-time-dilation MIN_TIME_DILATION] [--time-dilation-tol TIME_DILATION_TOL] [--write-tsv WRITE_TSV] [--run-multi] [--n-processors N_PROCESSORS]\n\nThe sweep.py module is the main script to run T3CO\n\noptions:\n  -h, --help            show this help message and exit\n  --config CONFIG       Input Config file (default: ./src/t3co/resources/T3COConfig.csv)\n  --analysis-id ANALYSIS_ID\n                        Analysis key from input Config file - 'config.analysis_id' (default: 0)\n  --vehicles VEHICLES   Input file for Vehicle models (default: ./src/t3co/resources/inputs/Demo_FY22_vehicle_model_assumptions.csv)\n  --scenarios SCENARIOS\n                        Input file for Scenario models (default: ./src/t3co/resources/inputs/Demo_FY22_scenario_assumptions.csv)\n  --selections [SELECTIONS ...]\n                        Selections desired to run. Selections can be an int, or list of ints, or range expression. Ex: --selections 234 or --selections \"[234,236,238]\" or --selections\n                        \"range(234, 150, 2)\" (default: None)\n  --drive-cycle [DRIVE_CYCLE ...]\n                        Override drive_cycle from scenario with a composite cycle, or an individual cycle, or a folder of cycles. File paths should be relative to the resources folder (default:\n                        None)\n  --eng-curves ENG_CURVES\n                        Input file for engine efficiency improvement cost curves (default: ./src/t3co/resources/auxiliary/EngineEffImprovementCostCurve.csv)\n  --lw-curves LW_CURVES\n                        Input file for lightweighting improvement cost curves (default: ./src/t3co/resources/auxiliary/LightweightImprovementCostCurve.csv)\n  --aero-curves AERO_CURVES\n                        Input file for aerodynamics improvement curves (default: ./src/t3co/resources/auxiliary/AeroDragImprovementCostCurve.csv)\n  --look-for LOOK_FOR   A string for string matching, example --look_for 'FCEV' or -look_for '[\"FCEV\", \"HEV\"]' (default: )\n  --skip-all-opt, --skopt\n                        If --skip_all_opt used, all runs skip optimization (default: False)\n  --skip-input-validation, --skiv\n                        If --skip_input_validation used, no pre-validation of inputs is run before sweep commences (default: True)\n  --exclude [EXCLUDE ...]\n                        Overrides -look_for. a string for string matching to exclude runs, example -exclude 'FCEV' or -look_for '[\"FCEV\", \"HEV\"]' (default: &gt;{-&lt;&gt;-}&lt;)\n  --algorithms [ALGORITHMS ...], --algos [ALGORITHMS ...], --algo [ALGORITHMS ...]\n                        Enter algorithm or list of algorithms, or \"ensemble\" to use all, to use for optimization: ex: -algos PatternSearch | -algos '[\"PatternSearch\", \"NSGA2\"]' | -algos\n                        \"ensemble\" (default: NSGA2)\n  --dst-dir DST_DIR     Directory to store T3CO results (default: ./src/results)\n  --dir-mark DIR_MARK   Name for results directory in addition to timestamp (default: )\n  --file-mark FILE_MARK\n                        Prefix to add to the result file names (default: )\n  --skip-save-veh       Toggle result vehicle model YAML file saving off (default: False)\n  --x-tol X_TOL         Parameter space tolerance for optimization (default: 0.001)\n  --f-tol F_TOL         Objective space tolerance for optimization (default: 0.001)\n  --n-max-gen N_MAX_GEN\n                        Max number of optimizer iterations regardless of algorithm (default: 1000)\n  --pop-size POP_SIZE   population of each generation (default: 25)\n  --nth-gen NTH_GEN     Period of generations in which to evaluate if convergence happens during optimization (default: 1)\n  --n-last N_LAST       Number of generations to look back for establishing convergence during optimization (default: 5)\n  --range-overshoot-tol RANGE_OVERSHOOT_TOL\n                        Range overshoot tolerance, example '0.20' allows 20% range overshoot. Default of 'None' does not constrain overshoot. (default: None)\n  ---missed-trace-correction\n                        Activate FASTSim time-dilation to correct missed trace (default: False)\n  --max-time-dilation MAX_TIME_DILATION\n                        Maximum time dilation factor to 'catch up' with trace (default: 10)\n  --min-time-dilation MIN_TIME_DILATION\n                        Minimum time dilation to let trace 'catch up' (default: 0.1)\n  --time-dilation-tol TIME_DILATION_TOL\n                        Convergence criteria for time dilation (default: 0.001)\n  --write-tsv WRITE_TSV\n                        Boolean toggle to save intermediary .TSV cost results files (default: False)\n  --run-multi           Boolean switch to select multiprocessing version (default: False)\n  --n-processors N_PROCESSORS\n                        Number of processors to use for multiprocessing (default: 9)\n</code></pre>"},{"location":"quick_start/#t3co-results","title":"T3CO Results","text":"<p>After running the analysis, T3CO stores the results .CSV file in the directory specified by <code>config.dst_dir</code> (or the CLI argument <code>--dst-dir</code>). </p> <p>The results file includes a comprehensive list of Ledger Outputs that were calculated by the various T3CO Modules. In addition to the T3CO outputs, all the Vehicle input parameters (denoted by a prefix: <code>input_vehicle_value_</code>), Scenario input parameters(denoted by a prefix: <code>scenario_</code>), and Config parameters (denoted by a prefix: <code>config_</code>) are also present in the results file. When the optional optimization module is run, the optimized vehicle parameters are also listed ((denoted by a prefix: <code>optimized_vehicle_value_</code>)) instead of NaN values for non-optimization runs.</p>"},{"location":"quick_start/#t3co-visualization","title":"T3CO Visualization","text":"<p>The <code>t3co.visualization.charts</code> submodule is used to visualize the results CSV file that is generated after running T3CO. T3CO provides a demo file (<code>t3co.demos.visualization_demo</code>) to try out the visualization module for a sample analysis. The run_t3co function in the demo exports T3CO results as a pandas dataframe and generates the following visualization plots:</p> <ul> <li>TCO Breakdown Chart</li> </ul> <p></p> <ul> <li>Histogram Plot</li> </ul> <p></p> <ul> <li>Violin Plot</li> </ul> <p></p> <p>The user can provide other input parameters specific to each visualization method to further customize the plots.</p>"},{"location":"modules/CodeReference/","title":"Table of Contents","text":"<ul> <li>t3co</li> <li>t3co.tco.ledger</li> <li>Ledger<ul> <li>__new__</li> <li>__init__</li> <li>set_discounted_costs</li> <li>set_discounted_tco</li> <li>set_cost_components</li> <li>to_dict</li> <li>to_json</li> <li>to_df</li> <li>to_csv</li> <li>__str__</li> </ul> </li> <li>t3co.tco</li> <li>t3co.tco.tcocalc</li> <li>TCOCalc<ul> <li>__new__</li> <li>__init__</li> <li>calculate_capital_costs</li> <li>calculate_opportunity_costs</li> <li>calculate_operating_costs</li> <li>set_total_cost</li> <li>set_disc_total_cost</li> <li>__str__</li> </ul> </li> <li>t3co.optimize</li> <li>t3co.constants.Global</li> <li>DieselGalPerGasGal</li> <li>kgH2_per_gge</li> <li>mps_to_mph</li> <li>m_to_mi</li> <li>set_tco_intermediates</li> <li>set_tco_results</li> <li>kg_to_lbs</li> <li>lbs_to_kgs</li> <li>not_falsy</li> <li>t3co.constants</li> <li>t3co.resources</li> <li>t3co.energy_models</li> <li>t3co.energy_models.energy</li> <li>Energy<ul> <li>__new__</li> <li>__init__</li> <li>run_fastsim_model</li> </ul> </li> <li>t3co.energy_models.fastsim_model.fastsim_wrapper</li> <li>RunFastsim<ul> <li>__new__</li> <li>load_vehicle</li> <li>load_design_cycle_from_scenario</li> <li>load_design_cycle_from_path</li> <li>get_simdrive</li> <li>get_range</li> </ul> </li> <li>t3co.energy_models.fastsim_model</li> <li>t3co.utils</li> <li>t3co.utils.print_class_objects</li> <li>obj_to_string</li> <li>handle_nan</li> <li>custom_default</li> <li>to_flat_dict</li> <li>remove_df_attrs</li> <li>t3co.utils.demo_files_installer</li> <li>main</li> <li>copy_demo_input_files</li> <li>t3co.input_data.config</li> <li>Config<ul> <li>__new__</li> <li>from_file</li> <li>from_dict</li> <li>validate_analysis_id</li> <li>check_drivecycles_and_create_selections</li> <li>read_auxiliary_files</li> <li>delete_dataframes</li> </ul> </li> <li>t3co.input_data.vehicle</li> <li>Vehicle<ul> <li>__new__</li> <li>from_config</li> <li>from_db</li> <li>set_veh_kg</li> <li>delete_dataframes</li> </ul> </li> <li>t3co.input_data</li> <li>t3co.input_data.scenario</li> <li>Scenario<ul> <li>__new__</li> <li>from_file</li> <li>override_from_config</li> <li>get_discounted_value</li> <li>delete_dataframes</li> </ul> </li> <li>t3co.cli</li> <li>t3co.cli.sweep</li> <li>load_vehicle_scenario_energy</li> <li>generate_ledger</li> <li>create_results_filepath</li> <li>export_results_to_csv</li> <li>run_t3co</li> <li>t3co.visualize.charts</li> <li>t3co.visualize</li> <li>t3co.cost_models.operating_costs</li> <li>OperatingCosts<ul> <li>__new__</li> <li>__init__</li> <li>set_fuel_cost</li> <li>set_maintenance_oper_cost</li> <li>set_insurance_cost</li> <li>set_purchasing_payment_cost</li> <li>set_fueling_dwell_labor_cost</li> <li>set_net_oper_cost</li> <li>set_disc_oper_cost</li> <li>__str__</li> </ul> </li> <li>t3co.cost_models</li> <li>t3co.cost_models.opportunity_costs</li> <li>OpportunityCosts<ul> <li>__new__</li> <li>__init__</li> <li>set_payload_cap_cost_multiplier</li> <li>set_fueling_dwell_time_cost</li> <li>set_mr_downtime_cost</li> <li>set_net_downtime_oppy_cost</li> <li>set_disc_downtime_oppy_cost</li> <li>__str__</li> </ul> </li> <li>t3co.cost_models.capital_costs</li> <li>CapitalCosts<ul> <li>__new__</li> <li>__init__</li> <li>set_glider_cost</li> <li>set_fuel_converter_cost_dol</li> <li>set_fuel_storage_cost</li> <li>set_motor_control_power_elecs_cost</li> <li>set_plug_cost</li> <li>set_battery_cost</li> <li>set_msrp</li> <li>set_purchase_tax</li> <li>set_downpayment</li> <li>set_residual_cost</li> <li>set_net_capital_cost</li> <li>set_disc_residual_cost</li> <li>get_marked_up_value</li> </ul> </li> <li>t3co.demos</li> <li>t3co.demos.demo</li> </ul>"},{"location":"modules/CodeReference/#t3co","title":"t3co","text":"<p>Python Package Template</p> <p></p>"},{"location":"modules/CodeReference/#t3cotcoledger","title":"t3co.tco.ledger","text":""},{"location":"modules/CodeReference/#ledger-objects","title":"Ledger Objects","text":"Python<pre><code>class Ledger()\n</code></pre>"},{"location":"modules/CodeReference/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Ledger class.</p> <p></p>"},{"location":"modules/CodeReference/#__init__","title":"__init__","text":"Python<pre><code>def __init__(vehicle: Vehicle,\n             scenario: Scenario,\n             energy: Energy = None,\n             config: Config = None)\n</code></pre> <p>Initializes the Ledger instance.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy, optional - The energy instance. Defaults to None.</li> <li><code>config</code> Config, optional - The configuration instance. Defaults to None.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_discounted_costs","title":"set_discounted_costs","text":"Python<pre><code>def set_discounted_costs()\n</code></pre> <p>Sets the discounted cost components for the Ledger instance.</p> <p></p>"},{"location":"modules/CodeReference/#set_discounted_tco","title":"set_discounted_tco","text":"Python<pre><code>def set_discounted_tco()\n</code></pre> <p>Sets the discounted TCO for the Ledger instance.</p> <p></p>"},{"location":"modules/CodeReference/#set_cost_components","title":"set_cost_components","text":"Python<pre><code>def set_cost_components()\n</code></pre> <p>Sets the cost components for the Ledger instance.</p> <p></p>"},{"location":"modules/CodeReference/#to_dict","title":"to_dict","text":"Python<pre><code>def to_dict(include_prefix: bool = True, flatten: bool = True) -&gt; dict\n</code></pre> <p>Exports the Ledger instance to a dictionary.</p> <p>Arguments:</p> <ul> <li><code>include_prefix</code> bool, optional - If True, exported column names contain the T3CO submodule names as prefix. Defaults to True.</li> <li><code>flatten</code> bool, optional - If True, the nested dict output flattens to a single dictionary. Defaults to True.</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code> - The Ledger instance as a dictionary.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#to_json","title":"to_json","text":"Python<pre><code>def to_json(filepath: Union[str, Path],\n            include_prefix: bool = True,\n            flatten: bool = True) -&gt; None\n</code></pre> <p>Saves the Ledger instance to a JSON file.</p> <p>Arguments:</p> <ul> <li><code>filepath</code> Union[str, Path] - The file path where the JSON will be saved.</li> <li><code>include_prefix</code> bool, optional - If True, exported column names contain the T3CO submodule names as prefix. Defaults to True.</li> <li><code>flatten</code> bool, optional - If True, the nested dict output flattens to a single dictionary. Defaults to True.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#to_df","title":"to_df","text":"Python<pre><code>def to_df() -&gt; pd.DataFrame\n</code></pre> <p>Converts the Ledger instance to a DataFrame.</p> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code> - The Ledger instance as a DataFrame.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#to_csv","title":"to_csv","text":"Python<pre><code>def to_csv(filepath: Union[str, Path]) -&gt; None\n</code></pre> <p>Saves the Ledger instance to a CSV file.</p> <p>Arguments:</p> <ul> <li><code>filepath</code> Union[str, Path] - The file path where the CSV will be saved.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#__str__","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the Ledger instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the Ledger instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3cotco","title":"t3co.tco","text":""},{"location":"modules/CodeReference/#t3cotcotcocalc","title":"t3co.tco.tcocalc","text":""},{"location":"modules/CodeReference/#tcocalc-objects","title":"TCOCalc Objects","text":"Python<pre><code>class TCOCalc()\n</code></pre>"},{"location":"modules/CodeReference/#__new___1","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the TCOCalc class.</p> <p></p>"},{"location":"modules/CodeReference/#__init___1","title":"__init__","text":"Python<pre><code>def __init__(year_index: int,\n             vehicle: Vehicle,\n             scenario: Scenario,\n             energy: Energy,\n             payload_cap_cost_multiplier: float = None,\n             cap_costs: CapitalCosts = None)\n</code></pre> <p>Initializes the TCOCalc instance.</p> <p>Arguments:</p> <ul> <li><code>year_index</code> int - The year index.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy - The energy instance.</li> <li><code>payload_cap_cost_multiplier</code> float, optional - Payload capacity cost multiplier. Defaults to None.</li> <li><code>cap_costs</code> CapitalCosts, optional - Capital costs instance. Defaults to None.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#calculate_capital_costs","title":"calculate_capital_costs","text":"Python<pre><code>def calculate_capital_costs(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Calculates the capital costs.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#calculate_opportunity_costs","title":"calculate_opportunity_costs","text":"Python<pre><code>def calculate_opportunity_costs(vehicle: Vehicle, scenario: Scenario,\n                                energy: Energy) -&gt; None\n</code></pre> <p>Calculates the opportunity costs.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy - The energy instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#calculate_operating_costs","title":"calculate_operating_costs","text":"Python<pre><code>def calculate_operating_costs(vehicle: Vehicle, scenario: Scenario,\n                              energy: Energy) -&gt; None\n</code></pre> <p>Calculates the operating costs.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy - The energy instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_total_cost","title":"set_total_cost","text":"Python<pre><code>def set_total_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the total cost for the year.</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_disc_total_cost","title":"set_disc_total_cost","text":"Python<pre><code>def set_disc_total_cost(vehicle: Vehicle,\n                        scenario: Scenario,\n                        payload_cap_cost_multiplier: float = None,\n                        TCO_switch=\"DIRECT\") -&gt; None\n</code></pre> <p>Sets the discounted total cost for the year.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>payload_cap_cost_multiplier</code> float, optional - Payload capacity cost multiplier. Defaults to None.</li> <li><code>TCO_switch</code> str, optional - TCO calculation method. Defaults to \"DIRECT\".</li> </ul> <p></p>"},{"location":"modules/CodeReference/#__str___1","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the TCOCalc instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the TCOCalc instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3cooptimize","title":"t3co.optimize","text":""},{"location":"modules/CodeReference/#t3coconstantsglobal","title":"t3co.constants.Global","text":"<p>Global constants Stores paths to directories used for input files, as well as constants referenced throughout the code base</p> <p></p>"},{"location":"modules/CodeReference/#dieselgalpergasgal","title":"DieselGalPerGasGal","text":"<p>energy equivalent gallons of diesel per 1 gallon gas</p> <p></p>"},{"location":"modules/CodeReference/#kgh2_per_gge","title":"kgH2_per_gge","text":"<p>https://epact.energy.gov/fuel-conversion-factors for Hydrogen</p> <p></p>"},{"location":"modules/CodeReference/#mps_to_mph","title":"mps_to_mph","text":"<p>1 mps = 2.23694 mph</p> <p></p>"},{"location":"modules/CodeReference/#m_to_mi","title":"m_to_mi","text":"<p>1 m = 0.000621371 mi</p> <p></p>"},{"location":"modules/CodeReference/#set_tco_intermediates","title":"set_tco_intermediates","text":"Python<pre><code>def set_tco_intermediates()\n</code></pre> <p>This function sets path for TCO_INTERMEDIATES to save tsv files</p> <p></p>"},{"location":"modules/CodeReference/#set_tco_results","title":"set_tco_results","text":"Python<pre><code>def set_tco_results()\n</code></pre> <p>This function sets path for TCO_RESULTS</p> <p></p>"},{"location":"modules/CodeReference/#kg_to_lbs","title":"kg_to_lbs","text":"Python<pre><code>def kg_to_lbs(kgs: float) -&gt; float\n</code></pre> <p>This function converts kg to lb</p> <p>Arguments:</p> <ul> <li><code>kgs</code> float - mass in kg</li> </ul> <p>Returns:</p> <ul> <li><code>(float)</code> - mass in pounds</li> </ul> <p></p>"},{"location":"modules/CodeReference/#lbs_to_kgs","title":"lbs_to_kgs","text":"Python<pre><code>def lbs_to_kgs(lbs: float) -&gt; float\n</code></pre> <p>This function converts lb to kg</p> <p>Arguments:</p> <ul> <li><code>lbs</code> float - mass in pounds</li> </ul> <p>Returns:</p> <ul> <li><code>(float)</code> - mass in kg</li> </ul> <p></p>"},{"location":"modules/CodeReference/#not_falsy","title":"not_falsy","text":"Python<pre><code>def not_falsy(var: float) -&gt; bool\n</code></pre> <p>This function returns True to verify that var is NOT falsy: not in [None, np.nan, 0, False]</p> <p>Arguments:</p> <ul> <li><code>var</code> float - variable to check</li> </ul> <p>Returns:</p> <ul> <li><code>(bool)</code> - True if not in [None, 0, False]</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3coconstants","title":"t3co.constants","text":""},{"location":"modules/CodeReference/#t3coresources","title":"t3co.resources","text":""},{"location":"modules/CodeReference/#t3coenergy_models","title":"t3co.energy_models","text":""},{"location":"modules/CodeReference/#t3coenergy_modelsenergy","title":"t3co.energy_models.energy","text":""},{"location":"modules/CodeReference/#energy-objects","title":"Energy Objects","text":"Python<pre><code>@dataclass\nclass Energy()\n</code></pre>"},{"location":"modules/CodeReference/#__new___2","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Energy class.</p> <p></p>"},{"location":"modules/CodeReference/#__init___2","title":"__init__","text":"Python<pre><code>def __init__(mpgge: float = None, primary_fuel_range_mi: float = None)\n</code></pre> <p>Initializes the Energy instance.</p> <p>Arguments:</p> <ul> <li><code>mpgge</code> float, optional - Miles per gallon gasoline equivalent. Defaults to None.</li> <li><code>primary_fuel_range_mi</code> float, optional - Primary fuel range in miles. Defaults to None.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#run_fastsim_model","title":"run_fastsim_model","text":"Python<pre><code>def run_fastsim_model(\n    veh_no: int,\n    scenario: Scenario,\n    vehicle_file: Union[str, Path] = gl.RESOURCES_FOLDERPATH / \"inputs\" /\n    \"Demo_FY22_vehicle_model_assumptions.csv\"\n) -&gt; None\n</code></pre> <p>Runs the FASTSim model to calculate mpgge and primary fuel range.</p> <p>Arguments:</p> <ul> <li><code>veh_no</code> int - Vehicle selection number.</li> <li><code>scenario</code> Scenario - Scenario instance containing configuration data.</li> <li><code>vehicle_file</code> Union[str, Path], optional - Vehicle model assumptions input CSV file path. Defaults to gl.RESOURCES_FOLDERPATH / \"inputs\" / \"Demo_FY22_vehicle_model_assumptions.csv\".</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3coenergy_modelsfastsim_modelfastsim_wrapper","title":"t3co.energy_models.fastsim_model.fastsim_wrapper","text":""},{"location":"modules/CodeReference/#runfastsim-objects","title":"RunFastsim Objects","text":"Python<pre><code>class RunFastsim()\n</code></pre>"},{"location":"modules/CodeReference/#__new___3","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the RunFastsim class.</p> <p></p>"},{"location":"modules/CodeReference/#load_vehicle","title":"load_vehicle","text":"Python<pre><code>def load_vehicle(veh_no: int,\n                 veh_input_path: Union[str, Path],\n                 use_rust: bool = True) -&gt; fastsim.vehicle.Vehicle\n</code></pre> <p>Loads vehicle object from vehicle number and input CSV filepath.</p> <p>Arguments:</p> <ul> <li><code>veh_no</code> int - Vehicle selection number.</li> <li><code>veh_input_path</code> Union[str, Path] - Vehicle model assumptions input CSV file path.</li> </ul> <p>Returns:</p> <ul> <li><code>fastsim.vehicle.Vehicle</code> - FASTSim vehicle object.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#load_design_cycle_from_scenario","title":"load_design_cycle_from_scenario","text":"Python<pre><code>def load_design_cycle_from_scenario(\n    scenario: Scenario,\n    cyc_file_path: Union[str, Path] = gl.CYCLES_FOLDER,\n    return_rustcycle: bool = True\n) -&gt; Union[fastsim.cycle.Cycle, List[fastsim.cycle.Cycle]]\n</code></pre> <p>Loads the design cycle used for mpgge and range determination.</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - Scenario object for current selection.</li> <li><code>cyc_file_path</code> Union[str, Path], optional - Drive cycle input file path. Defaults to gl.CYCLES_FOLDER.</li> </ul> <p>Returns:</p> <p>Union[fastsim.cycle.Cycle, List[fastsim.cycle.Cycle]]: FASTSim cycle object for current Scenario object.</p> <p></p>"},{"location":"modules/CodeReference/#load_design_cycle_from_path","title":"load_design_cycle_from_path","text":"Python<pre><code>def load_design_cycle_from_path(\n    cyc_file_path: Union[str, Path],\n    return_rustcycle: bool = True\n) -&gt; Union[fastsim.cycle.RustCycle, fastsim.cycle.Cycle]\n</code></pre> <p>Loads the Cycle object from the drive cycle filepath.</p> <p>Arguments:</p> <ul> <li><code>cyc_file_path</code> Union[str, Path] - Drive cycle input file path.</li> </ul> <p>Returns:</p> <ul> <li><code>fastsim.cycle.Cycle</code> - FASTSim cycle object for current Scenario object.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#get_simdrive","title":"get_simdrive","text":"Python<pre><code>def get_simdrive(\n        cycle: fastsim.cycle.Cycle) -&gt; fastsim.fastsimrust.RustSimDrive\n</code></pre> <p>Creates a SimDrive object for the given cycle and vehicle.</p> <p>Arguments:</p> <ul> <li><code>cycle</code> fastsim.cycle.Cycle - The drive cycle.</li> </ul> <p>Returns:</p> <ul> <li><code>fastsim.fastsimrust.RustSimDrive</code> - The RustSimDrive object.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#get_range","title":"get_range","text":"Python<pre><code>def get_range() -&gt; None\n</code></pre> <p>Calculates the range of the vehicle based on its type and energy storage.</p> <p></p>"},{"location":"modules/CodeReference/#t3coenergy_modelsfastsim_model","title":"t3co.energy_models.fastsim_model","text":""},{"location":"modules/CodeReference/#t3coutils","title":"t3co.utils","text":""},{"location":"modules/CodeReference/#t3coutilsprint_class_objects","title":"t3co.utils.print_class_objects","text":""},{"location":"modules/CodeReference/#obj_to_string","title":"obj_to_string","text":"Python<pre><code>def obj_to_string(obj: Union[object, List[object]],\n                  extra: str = \"    \") -&gt; str\n</code></pre> <p>Converts an object or list of objects to a formatted string representation.</p> <p>Arguments:</p> <ul> <li><code>obj</code> Union[object, List[object]] - The object or list of objects to convert.</li> <li><code>extra</code> str, optional - Indentation string for nested objects. Defaults to \"    \".</li> </ul> <p>Returns:</p> <ul> <li><code>str</code> - Formatted string representation of the object.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#handle_nan","title":"handle_nan","text":"Python<pre><code>def handle_nan(\n        obj: Union[float, dict, list]) -&gt; Union[None, dict, list, float]\n</code></pre> <p>Replaces NaN values in an object with None.</p> <p>Arguments:</p> <ul> <li><code>obj</code> Union[float, dict, list] - The object to process.</li> </ul> <p>Returns:</p> <p>Union[None, dict, list, float]: The processed object with NaN values replaced by None.</p> <p></p>"},{"location":"modules/CodeReference/#custom_default","title":"custom_default","text":"Python<pre><code>def custom_default(obj: object) -&gt; Union[None, dict, str]\n</code></pre> <p>Custom default function for JSON serialization.</p> <p>Arguments:</p> <ul> <li><code>obj</code> object - The object to serialize.</li> </ul> <p>Returns:</p> <p>Union[None, dict, str]: The serialized object.</p> <p></p>"},{"location":"modules/CodeReference/#to_flat_dict","title":"to_flat_dict","text":"Python<pre><code>def to_flat_dict(obj: object,\n                 include_predix: bool = True,\n                 prefix: str = \"\",\n                 delimiter: str = \"_\") -&gt; dict\n</code></pre> <p>Flattens a nested object into a dictionary.</p> <p>Arguments:</p> <ul> <li><code>obj</code> object - The object to flatten.</li> <li><code>include_predix</code> bool, optional - Whether to include the prefix in the keys. Defaults to True.</li> <li><code>prefix</code> str, optional - The prefix for the keys. Defaults to \"\".</li> <li><code>delimiter</code> str, optional - The delimiter for the keys. Defaults to \"_\".</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code> - The flattened dictionary.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#remove_df_attrs","title":"remove_df_attrs","text":"Python<pre><code>def remove_df_attrs(obj: object) -&gt; None\n</code></pre> <p>Removes DataFrame attributes from an object.</p> <p>Arguments:</p> <ul> <li><code>obj</code> object - The object to process.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3coutilsdemo_files_installer","title":"t3co.utils.demo_files_installer","text":""},{"location":"modules/CodeReference/#main","title":"main","text":"Python<pre><code>def main()\n</code></pre> <p>Requests user inputs for whether and where to copy t3co demo input files from the t3co.resources folder. Calls the copy_demo_input_files function.</p> <p></p>"},{"location":"modules/CodeReference/#copy_demo_input_files","title":"copy_demo_input_files","text":"Python<pre><code>def copy_demo_input_files(destination_path: Union[str, Path]) -&gt; None\n</code></pre> <p>Copies the t3co.resources folder that includes demo input files to a user input destination_path.</p> <p>Arguments:</p> <ul> <li><code>destination_path</code> Union[str, Path] - Path of destination directory for copying t3co.resources folder.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3coinput_dataconfig","title":"t3co.input_data.config","text":""},{"location":"modules/CodeReference/#config-objects","title":"Config Objects","text":"Python<pre><code>@dataclass\nclass Config()\n</code></pre>"},{"location":"modules/CodeReference/#__new___4","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Config class.</p> <p></p>"},{"location":"modules/CodeReference/#from_file","title":"from_file","text":"Python<pre><code>def from_file(\n        analysis_id: int = 0,\n        filename: str = gl.RESOURCES_FOLDERPATH / \"T3COConfig.csv\") -&gt; Self\n</code></pre> <p>Generates a Config dictionary from CSV file and calls Config.from_dict.</p> <p>Arguments:</p> <ul> <li><code>filename</code> str - Path of input T3CO Config file.</li> <li><code>analysis_id</code> int - Analysis ID selections.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - Config instance containing all values from T3CO Config CSV file.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#from_dict","title":"from_dict","text":"Python<pre><code>def from_dict(config_dict: dict) -&gt; Self\n</code></pre> <p>Generates a Config instance from config_dict.</p> <p>Arguments:</p> <ul> <li><code>config_dict</code> dict - Dictionary containing fields from T3CO Config input CSV file.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - Config instance containing all values from T3CO Config CSV file.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#validate_analysis_id","title":"validate_analysis_id","text":"Python<pre><code>def validate_analysis_id() -&gt; pd.DataFrame\n</code></pre> <p>Validates that the correct analysis ID is input.</p> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code> - DataFrame containing the configuration data for the given analysis ID.</li> </ul> <p>Raises:</p> <ul> <li><code>Exception</code> - If analysis_id is not found or config file does not exist.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#check_drivecycles_and_create_selections","title":"check_drivecycles_and_create_selections","text":"Python<pre><code>def check_drivecycles_and_create_selections() -&gt; None\n</code></pre> <p>Checks if the config.drive_cycle input is a file or a folder. If a folder is provided, creates a list of all selections for each drive cycle in the folder as config.dc_files.</p> <p></p>"},{"location":"modules/CodeReference/#read_auxiliary_files","title":"read_auxiliary_files","text":"Python<pre><code>def read_auxiliary_files() -&gt; None\n</code></pre> <p>Reads auxiliary files such as fuel prices and residual rates.</p> <p></p>"},{"location":"modules/CodeReference/#delete_dataframes","title":"delete_dataframes","text":"Python<pre><code>def delete_dataframes() -&gt; None\n</code></pre> <p>Deletes DataFrame attributes from the Config instance.</p> <p></p>"},{"location":"modules/CodeReference/#t3coinput_datavehicle","title":"t3co.input_data.vehicle","text":""},{"location":"modules/CodeReference/#vehicle-objects","title":"Vehicle Objects","text":"Python<pre><code>@dataclass\nclass Vehicle()\n</code></pre>"},{"location":"modules/CodeReference/#__new___5","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the OpportunityCosts class.</p> <p></p>"},{"location":"modules/CodeReference/#from_config","title":"from_config","text":"Python<pre><code>@classmethod\ndef from_config(cls, selection: int, config: Config) -&gt; Self\n</code></pre> <p>Creates a Vehicle instance from the configuration.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index.</li> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - An instance of the Vehicle class.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#from_db","title":"from_db","text":"Python<pre><code>@classmethod\ndef from_db(cls, selection: int, vehicle_db_file: Union[str, Path]) -&gt; Self\n</code></pre> <p>Creates a Vehicle instance from the vehicle database file.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index.</li> <li><code>vehicle_db_file</code> Union[str, Path] - The vehicle database file path.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - An instance of the Vehicle class.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_veh_kg","title":"set_veh_kg","text":"Python<pre><code>def set_veh_kg() -&gt; None\n</code></pre> <p>Sets the vehicle weight in kilograms.</p> <p></p>"},{"location":"modules/CodeReference/#delete_dataframes_1","title":"delete_dataframes","text":"Python<pre><code>def delete_dataframes() -&gt; None\n</code></pre> <p>Deletes DataFrame attributes from the Vehicle instance.</p> <p></p>"},{"location":"modules/CodeReference/#t3coinput_data","title":"t3co.input_data","text":""},{"location":"modules/CodeReference/#t3coinput_datascenario","title":"t3co.input_data.scenario","text":""},{"location":"modules/CodeReference/#scenario-objects","title":"Scenario Objects","text":"Python<pre><code>@dataclass\nclass Scenario()\n</code></pre> <p>Class object that contains all TCO parameters and performance target (range, grade, accel) information for a vehicle such that performance and TCO can be computed during optimization.</p> <p></p>"},{"location":"modules/CodeReference/#__new___6","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Scenario class.</p> <p></p>"},{"location":"modules/CodeReference/#from_file_1","title":"from_file","text":"Python<pre><code>@classmethod\ndef from_file(\n    cls,\n    selection: int,\n    scenario_file: Union[str, Path] = gl.RESOURCES_FOLDERPATH / \"inputs\" /\n    \"Demo_FY22_scenario_assumptions.csv\"\n) -&gt; Self\n</code></pre> <p>Creates a Scenario instance from a CSV file.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index to filter the scenario data.</li> <li><code>scenario_file</code> Union[str, Path] - Path to the scenario CSV file.</li> </ul> <p>Returns:</p> <ul> <li><code>Scenario</code> - An instance of the Scenario class.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#override_from_config","title":"override_from_config","text":"Python<pre><code>def override_from_config(config: Config = None, verbose: bool = False) -&gt; Self\n</code></pre> <p>Overrides certain scenario fields if use_config is True and config object is not None.</p> <p>Arguments:</p> <ul> <li><code>config</code> Config, optional - Config object containing configuration data. Defaults to None.</li> <li><code>verbose</code> bool, optional - If True, prints the overridden fields. Defaults to False.</li> </ul> <p>Raises:</p> <ul> <li><code>Exception</code> - If config file is not attached or scenario.use_config is set to False.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#get_discounted_value","title":"get_discounted_value","text":"Python<pre><code>def get_discounted_value(value: float, year_number: int) -&gt; float\n</code></pre> <p>Calculates the discounted value for a given year.</p> <p>Arguments:</p> <ul> <li><code>value</code> float - The value to be discounted.</li> <li><code>year_number</code> int - The year number for discounting.</li> </ul> <p>Returns:</p> <ul> <li><code>float</code> - The discounted value.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#delete_dataframes_2","title":"delete_dataframes","text":"Python<pre><code>def delete_dataframes() -&gt; None\n</code></pre> <p>Deletes DataFrame attributes from the Scenario instance.</p> <p></p>"},{"location":"modules/CodeReference/#t3cocli","title":"t3co.cli","text":""},{"location":"modules/CodeReference/#t3coclisweep","title":"t3co.cli.sweep","text":""},{"location":"modules/CodeReference/#load_vehicle_scenario_energy","title":"load_vehicle_scenario_energy","text":"Python<pre><code>def load_vehicle_scenario_energy(\n        selection: Union[int, str],\n        config: Config,\n        vehicle: Vehicle = None,\n        scenario: Scenario = None,\n        energy: Energy = None) -&gt; Tuple[Vehicle, Scenario, Energy]\n</code></pre> <p>Loads the vehicle, scenario, and energy models based on the selection and config.</p> <p>Arguments:</p> <ul> <li><code>selection</code> Union[int, str] - The selection index or string.</li> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <p>Tuple[Vehicle, Scenario, Energy]: The vehicle, scenario, and energy models.</p> <p></p>"},{"location":"modules/CodeReference/#generate_ledger","title":"generate_ledger","text":"Python<pre><code>def generate_ledger(selection: int, config: Config) -&gt; Dict\n</code></pre> <p>Generates the ledger for the given selection and config.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index.</li> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <ul> <li><code>Dict</code> - The ledger as a dictionary.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#create_results_filepath","title":"create_results_filepath","text":"Python<pre><code>def create_results_filepath(config: Config) -&gt; Path\n</code></pre> <p>Creates the results file path based on the config.</p> <p>Arguments:</p> <ul> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <ul> <li><code>Path</code> - The path to the results file.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#export_results_to_csv","title":"export_results_to_csv","text":"Python<pre><code>def export_results_to_csv(\n    reports_list: List[Dict],\n    config: Config,\n    output_path: Union[str, Path] = None,\n    return_filepath: bool = True,\n    return_df: bool = False,\n    sort_values: bool = False\n) -&gt; Tuple[Union[Path, None], Union[pd.DataFrame, None]]\n</code></pre> <p>Exports the results to a CSV file.</p> <p>Arguments:</p> <ul> <li><code>reports_list</code> List[Dict] - The list of reports.</li> <li><code>config</code> Config - The configuration instance.</li> <li><code>output_path</code> Union[str, Path], optional - The output path for the CSV file. Defaults to None.</li> <li><code>return_filepath</code> bool, optional - Whether to return the file path. Defaults to True.</li> <li><code>return_df</code> bool, optional - Whether to return the DataFrame. Defaults to False.</li> <li><code>sort_values</code> bool, optional - Whether to sort the values by selection. Defaults to False.</li> </ul> <p>Returns:</p> <p>Tuple[Union[Path, None], Union[pd.DataFrame, None]]: The output path and DataFrame if specified.</p> <p></p>"},{"location":"modules/CodeReference/#run_t3co","title":"run_t3co","text":"Python<pre><code>def run_t3co(config: Config, save_results: bool = True) -&gt; None\n</code></pre> <p>Runs the T3CO analysis.</p> <p>Arguments:</p> <ul> <li><code>config</code> Config - The configuration instance.</li> <li><code>save_results</code> bool, optional - Whether to save the results. Defaults to True.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3covisualizecharts","title":"t3co.visualize.charts","text":""},{"location":"modules/CodeReference/#t3covisualize","title":"t3co.visualize","text":""},{"location":"modules/CodeReference/#t3cocost_modelsoperating_costs","title":"t3co.cost_models.operating_costs","text":""},{"location":"modules/CodeReference/#operatingcosts-objects","title":"OperatingCosts Objects","text":"Python<pre><code>class OperatingCosts()\n</code></pre>"},{"location":"modules/CodeReference/#__new___7","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the OperatingCosts class.</p> <p></p>"},{"location":"modules/CodeReference/#__init___3","title":"__init__","text":"Python<pre><code>def __init__(year_number: int,\n             cap_costs: CapitalCosts,\n             vehicle: Vehicle,\n             scenario: Scenario,\n             energy: Energy = None,\n             oppy_costs: OpportunityCosts = None)\n</code></pre> <p>Initializes the OperatingCosts instance.</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the operating costs are calculated.</li> <li><code>cap_costs</code> CapitalCosts - The capital costs associated with the vehicle.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>energy</code> Energy - The energy model instance.</li> <li><code>oppy_costs</code> OpportunityCosts - The opportunity costs associated with the vehicle.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_fuel_cost","title":"set_fuel_cost","text":"Python<pre><code>def set_fuel_cost(year_number: int, vehicle: Vehicle,\n                  scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the fuel cost for the given year.</p> <p>This method calculates the fuel cost based on the fuel price and the amount of fuel used. The calculation uses the following OperatingCosts elements: - distance_traveled_mi_per_yr - mpgge</p> <p>Inputs from scenario: - fuel_prices_df - fuel_type - model_year - region</p> <p>Estimated class variables: - fuel_price_dol_per_gge - fuel_used_gal_gge_per_yr - fuel_used_gal_gde_per_yr - energy_used_kwh_per_yr - fuel_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the fuel cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_maintenance_oper_cost","title":"set_maintenance_oper_cost","text":"Python<pre><code>def set_maintenance_oper_cost(year_number: int, vehicle: Vehicle,\n                              scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the maintenance operating cost for the given year.</p> <p>This method calculates the maintenance cost based on the maintenance cost per mile and the distance traveled.</p> <p>Inputs from scenario: - maint_oper_cost_dol_per_mi - vmt</p> <p>Estimated class variables: - maintenance_cost_dol_per_mi - maintenance_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the maintenance cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_insurance_cost","title":"set_insurance_cost","text":"Python<pre><code>def set_insurance_cost(year_number: int, cap_cost: CapitalCosts,\n                       vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the insurance cost for the given year.</p> <p>This method calculates the insurance cost based on the insurance rate and the total value of the vehicle.</p> <p>Inputs from scenario: - insurance_rates_pct_per_yr</p> <p>Inputs from cap_cost: - msrp_total_dol</p> <p>Estimated class variables: - insurance_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the insurance cost is calculated.</li> <li><code>cap_cost</code> CapitalCosts - The capital costs associated with the vehicle.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_purchasing_payment_cost","title":"set_purchasing_payment_cost","text":"Python<pre><code>def set_purchasing_payment_cost(year_number: int, scenario: Scenario,\n                                cap_costs: CapitalCosts)\n</code></pre> <p>Sets the purchasing payment cost for the given year.</p> <p>This method calculates the purchasing payment cost based on the purchasing method specified in the scenario.</p> <p>Inputs from scenario: - purchasing_method - purchasing_interest_apr_pct_per_yr - purchasing_payment_frequency_months - purchasing_term_yr - tax_rate_pct - leasing_money_factor</p> <p>Inputs from cap_costs: - purchasing_initial_principal_dol - msrp_total_dol - purchase_tax_dol - purchasing_downpayment_dol - residual_cost_dol</p> <p>Estimated OperatingCosts variables: - purchasing_payment_dol_per_yr - purchasing_cost_dol_per_yr - purchasing_remaining_principal_dol - purchasing_tax_amount_dol_per_year</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the purchasing payment cost is calculated.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the purchasing method, interest rate, and term.</li> <li><code>cap_costs</code> CapitalCosts - The capital costs associated with the vehicle.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_fueling_dwell_labor_cost","title":"set_fueling_dwell_labor_cost","text":"Python<pre><code>def set_fueling_dwell_labor_cost(scenario: Scenario,\n                                 oppy_costs: OpportunityCosts) -&gt; None\n</code></pre> <p>Sets the fueling dwell labor cost for the given year.</p> <p>This method calculates the fueling dwell labor cost based on the fueling dwell time and the labor rate.</p> <p>Inputs from scenario: - labor_rate_dol_per_hr</p> <p>Inputs from oppy_costs: - fueling_dwell_time_hr_per_yr</p> <p>Estimated OperatingCosts variables: - fueling_dwell_labor_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>oppy_costs</code> OpportunityCosts - The opportunity costs associated with the vehicle.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_net_oper_cost","title":"set_net_oper_cost","text":"Python<pre><code>def set_net_oper_cost() -&gt; None\n</code></pre> <p>Sets the net operating cost for the given year.</p> <p>This method calculates the net operating cost by summing the various operating cost components. The calculation uses the following OperatingCosts elements: - fuel_cost_dol_per_yr - fueling_dwell_labor_cost_dol_per_yr - maintenance_cost_dol_per_yr - insurance_cost_dol_per_yr - purchasing_payment_dol_per_yr</p> <p>Estimated OperatingCosts variables: - net_oper_cost_dol_per_yr</p> <p></p>"},{"location":"modules/CodeReference/#set_disc_oper_cost","title":"set_disc_oper_cost","text":"Python<pre><code>def set_disc_oper_cost(year_number: int, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the discounted operating cost for the given year.</p> <p>This method calculates the discounted operating cost based on the net operating cost and the discount rate. The calculation uses the following OperatingCosts elements: - net_oper_cost_dol_per_yr</p> <p>Inputs from scenario: - discount_rate_pct_per_yr</p> <p>Estimated OperatingCosts variables: - disc_oper_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the discounted operating cost is calculated.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#__str___2","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the OperatingCosts instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the OperatingCosts instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3cocost_models","title":"t3co.cost_models","text":""},{"location":"modules/CodeReference/#t3cocost_modelsopportunity_costs","title":"t3co.cost_models.opportunity_costs","text":""},{"location":"modules/CodeReference/#opportunitycosts-objects","title":"OpportunityCosts Objects","text":"Python<pre><code>class OpportunityCosts()\n</code></pre>"},{"location":"modules/CodeReference/#__new___8","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the OpportunityCosts class.</p> <p></p>"},{"location":"modules/CodeReference/#__init___4","title":"__init__","text":"Python<pre><code>def __init__(year_number: int, vehicle: Vehicle, scenario: Scenario,\n             energy: Energy)\n</code></pre> <p>Initializes the OpportunityCosts instance.</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the opportunity costs are calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>energy</code> Energy - The energy model instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_payload_cap_cost_multiplier","title":"set_payload_cap_cost_multiplier","text":"Python<pre><code>def set_payload_cap_cost_multiplier(vehicle: Vehicle,\n                                    scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the payload capacity cost multiplier for the vehicle.</p> <p>This method calculates the payload capacity cost multiplier based on the vehicle's weight and the scenario's weight distribution.</p> <p>Inputs from scenario: - plf_weight_distribution_file - plf_ref_veh_empty_mass_kg - gvwr_kg - gvwr_credit_kg</p> <p>Inputs from vehicle: - veh_kg - cargo_kg</p> <p>Estimated class variables: - payload_cap_cost_multiplier</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_fueling_dwell_time_cost","title":"set_fueling_dwell_time_cost","text":"Python<pre><code>def set_fueling_dwell_time_cost(year_number: int, vehicle: Vehicle,\n                                scenario: Scenario, energy: Energy) -&gt; None\n</code></pre> <p>Calculates the fueling dwell time cost for a vehicle based on fuel fill rate/charging power and shifts per year.</p> <p>Inputs from scenario: - fdt_frac_full_charge_bounds - shifts_per_year - constant_trip_distance_mi - vmt - fdt_dwpt_fraction_power_pct - ess_max_charging_power_kw - fs_fueling_rate_gasoline_gpm - fs_fueling_rate_diesel_gpm - fdt_num_free_dwell_trips - fdt_avg_overhead_hr_per_dwell_hr - fdt_available_freetime_hr - downtime_oppy_cost_dol_per_hr</p> <p>Inputs from vehicle: - veh_pt_type - ess_max_kwh - fs_kwh</p> <p>Inputs from energy: - primary_fuel_range_mi</p> <p>Estimated OpportunityCosts variables: - fdt_frac_full_charge_bounds - shifts_per_year - fdt_full_dwell_hr - trip_distance_mi - fdt_num_of_dwells - fueling_dwell_time_hr_per_yr - fueling_downtime_oppy_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the fueling dwell time cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>energy</code> Energy - The energy model instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_mr_downtime_cost","title":"set_mr_downtime_cost","text":"Python<pre><code>def set_mr_downtime_cost(year_number: int, vehicle: Vehicle,\n                         scenario: Scenario) -&gt; None\n</code></pre> <p>Calculates the Maintenance and Repair (M&amp;R) downtime cost based on planned, unplanned, and tire replacement downtime inputs.</p> <p>Inputs from scenario: - mr_planned_downtime_hr_per_yr - mr_unplanned_downtime_hr_per_mi - vmt - mr_avg_tire_life_mi - mr_tire_replace_downtime_hr_per_event - downtime_oppy_cost_dol_per_hr</p> <p>Estimated OpportunityCosts variables: - mr_planned_downtime_hr - mr_unplanned_downtime_hr - mr_tire_replacement_downtime_hr - mr_downtime_hr_per_yr - mr_downtime_oppy_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the M&amp;R downtime cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_net_downtime_oppy_cost","title":"set_net_downtime_oppy_cost","text":"Python<pre><code>def set_net_downtime_oppy_cost() -&gt; None\n</code></pre> <p>Sets the net downtime opportunity cost for the vehicle.</p> <p>This method calculates the net downtime opportunity cost by summing the fueling downtime and MR downtime opportunity costs. The calculation uses the following OpportunityCosts elements: - fueling_downtime_oppy_cost_dol_per_yr - mr_downtime_oppy_cost_dol_per_yr - fueling_dwell_time_hr_per_yr - mr_downtime_hr_per_yr</p> <p>Estimated OpportunityCosts variables: - net_downtime_oppy_cost_dol_per_yr - net_downtime_hr_per_yr</p> <p></p>"},{"location":"modules/CodeReference/#set_disc_downtime_oppy_cost","title":"set_disc_downtime_oppy_cost","text":"Python<pre><code>def set_disc_downtime_oppy_cost(year_number: int, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the discounted downtime opportunity cost for the given year.</p> <p>Inputs from scenario: - discount_rate_pct_per_yr</p> <p>Estimated class variables: - disc_downtime_oppy_cost_dol</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the discounted downtime opportunity cost is calculated.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#__str___3","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the OpportunityCosts instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the OpportunityCosts instance.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3cocost_modelscapital_costs","title":"t3co.cost_models.capital_costs","text":""},{"location":"modules/CodeReference/#capitalcosts-objects","title":"CapitalCosts Objects","text":"Python<pre><code>class CapitalCosts()\n</code></pre>"},{"location":"modules/CodeReference/#__new___9","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the CapitalCosts class.</p> <p></p>"},{"location":"modules/CodeReference/#__init___5","title":"__init__","text":"Python<pre><code>def __init__(vehicle: Vehicle,\n             scenario: Scenario,\n             msrp_total_dol: float = None)\n</code></pre> <p>Initializes the CapitalCosts instance.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>msrp_total_dol</code> float, optional - MSRP in dollars as input</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_glider_cost","title":"set_glider_cost","text":"Python<pre><code>def set_glider_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the glider cost for the vehicle.</p> <p>This method calculates the marked up glider cost based on the vehicle class and the base cost.</p> <p>Inputs from scenario: - vehicle_glider_cost_dol</p> <p>Estimated class variables: - glider_cost_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the base cost for the glider.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_fuel_converter_cost_dol","title":"set_fuel_converter_cost_dol","text":"Python<pre><code>def set_fuel_converter_cost_dol(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the fuel converter cost for the vehicle.</p> <p>This method calculates the marked up fuel converter cost based on the vehicle powertrain type and the cost per kW.</p> <p>Inputs from vehicle: - fc_max_kw</p> <p>Inputs from scenario: - fc_fuelcell_cost_dol_per_kw - fc_ice_cost_dol_per_kw - fc_cng_ice_cost_dol_per_kw - fc_ice_base_cost_dol</p> <p>Estimated class variables: - fuel_converter_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kW for the fuel converter.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_fuel_storage_cost","title":"set_fuel_storage_cost","text":"Python<pre><code>def set_fuel_storage_cost(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the fuel storage cost for the vehicle.</p> <p>This method calculates the marked up fuel storage cost based on the vehicle powertrain type and the cost per kWh.</p> <p>Inputs from vehicle: - fs_kwh</p> <p>Inputs from scenario: - fs_h2_cost_dol_per_kwh - fs_cng_cost_dol_per_kwh - fs_cost_dol_per_kwh</p> <p>Estimated class variables: - fuel_storage_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kWh for the fuel storage.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_motor_control_power_elecs_cost","title":"set_motor_control_power_elecs_cost","text":"Python<pre><code>def set_motor_control_power_elecs_cost(vehicle: Vehicle,\n                                       scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the motor control and power electronics cost for the vehicle.</p> <p>This method calculates the marked up motor control and power electronics cost based on the vehicle powertrain type and the cost per kW.</p> <p>Inputs from vehicle: - mc_max_kw</p> <p>Inputs from scenario: - pe_mc_base_cost_dol - pe_mc_cost_dol_per_kw</p> <p>Estimated class variables: - motor_control_power_elecs_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kW for the motor control and power electronics.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_plug_cost","title":"set_plug_cost","text":"Python<pre><code>def set_plug_cost(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the plug cost for the vehicle.</p> <p>This method calculates the marked up plug cost based on the base cost.</p> <p>Inputs from scenario: - plug_base_cost_dol</p> <p>Estimated class variables: - plug_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the base cost for the plug.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_battery_cost","title":"set_battery_cost","text":"Python<pre><code>def set_battery_cost(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the battery cost for the vehicle.</p> <p>This method calculates the marked up battery cost based on the energy storage system (ESS) capacity and the cost per kWh.</p> <p>Inputs from vehicle: - ess_max_kwh</p> <p>Inputs from scenario: - ess_base_cost_dol - ess_cost_dol_per_kwh</p> <p>Estimated class variables: - battery_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kWh for the battery.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_msrp","title":"set_msrp","text":"Python<pre><code>def set_msrp() -&gt; None\n</code></pre> <p>Calculates the total MSRP (Manufacturer's Suggested Retail Price) for the vehicle.</p> <p>This method calculates the total MSRP by summing the costs of various components of the vehicle. The calculation uses the following CapitalCosts elements: - glider_cost_dol - fuel_storage_cost_dol - fuel_converter_cost_dol - motor_control_power_elecs_cost_dol - battery_cost_dol - plug_cost_dol</p> <p>Estimated class variables: - msrp_total_dol</p> <p></p>"},{"location":"modules/CodeReference/#set_purchase_tax","title":"set_purchase_tax","text":"Python<pre><code>def set_purchase_tax(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the purchase tax for the vehicle.</p> <p>This method calculates the purchase tax based on the total MSRP (Manufacturer's Suggested Retail Price) of the vehicle components. The calculations use the following CapitalCosts elements: - msrp_total_dol</p> <p>Inputs from scenario: - tax_rate_pct</p> <p>Estimated class variables: - purchase_tax_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the tax rate.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_downpayment","title":"set_downpayment","text":"Python<pre><code>def set_downpayment(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the downpayment and initial principal for the vehicle purchase.</p> <p>This method calculates the downpayment and initial principal based on the purchasing method specified in the scenario. The calculations use the following CapitalCosts elements: - msrp_total_dol - purchase_tax_dol</p> <p>Inputs from scenario: - purchasing_method - purchasing_down_payment_pct - purchasing_interest_apr_pct_per_yr</p> <p>Estimated class variables: - purchasing_downpayment_dol - purchasing_initial_principal_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the purchasing method, down payment percentage, and interest rate.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_residual_cost","title":"set_residual_cost","text":"Python<pre><code>def set_residual_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the residual cost for the vehicle.</p> <p>This method calculates the residual cost based on the total MSRP (Manufacturer's Suggested Retail Price) of the vehicle components, the depreciation rates per year, and the vehicle's life span. The residual cost is the remaining value of the vehicle after depreciation. The calculation uses the following CapitalCosts elements: - msrp_total_dol</p> <p>Inputs from scenario: - depreciation_rates_pct_per_yr - vehicle_life_yr</p> <p>Estimated scenario variables: - residual_rate_pct</p> <p>Estimated class variables: - residual_cost_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including depreciation rates and vehicle life span.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#set_net_capital_cost","title":"set_net_capital_cost","text":"Python<pre><code>def set_net_capital_cost() -&gt; None\n</code></pre> <p>Sets the total capital cost for the vehicle.</p> <p>This method calculates the total capital cost by summing the costs of various components and applying the purchase tax. The calculation uses the following CapitalCosts elements: - purchasing_downpayment_dol</p> <p>Inputs from scenario: - tax_rate_pct</p> <p>Estimated class variables: - net_capital_cost_dol</p> <p></p>"},{"location":"modules/CodeReference/#set_disc_residual_cost","title":"set_disc_residual_cost","text":"Python<pre><code>def set_disc_residual_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the discounted residual cost for the vehicle.</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#get_marked_up_value","title":"get_marked_up_value","text":"Python<pre><code>def get_marked_up_value(value: float, scenario: Scenario) -&gt; float\n</code></pre> <p>Returns the marked up value.</p> <p>Arguments:</p> <ul> <li><code>value</code> float - The value to mark up.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p>Returns:</p> <ul> <li><code>float</code> - The marked up value.</li> </ul> <p></p>"},{"location":"modules/CodeReference/#t3codemos","title":"t3co.demos","text":""},{"location":"modules/CodeReference/#t3codemosdemo","title":"t3co.demos.demo","text":""},{"location":"modules/Global/","title":"Table of Contents","text":"<ul> <li>t3co/constants/Global</li> <li>DieselGalPerGasGal</li> <li>kgH2_per_gge</li> <li>mps_to_mph</li> <li>m_to_mi</li> <li>set_tco_intermediates</li> <li>set_tco_results</li> <li>kg_to_lbs</li> <li>lbs_to_kgs</li> <li>not_falsy</li> </ul>"},{"location":"modules/Global/#t3coconstantsglobal","title":"t3co/constants/Global","text":"<p>Global constants Stores paths to directories used for input files, as well as constants referenced throughout the code base</p> <p></p>"},{"location":"modules/Global/#dieselgalpergasgal","title":"DieselGalPerGasGal","text":"<p>energy equivalent gallons of diesel per 1 gallon gas</p> <p></p>"},{"location":"modules/Global/#kgh2_per_gge","title":"kgH2_per_gge","text":"<p>https://epact.energy.gov/fuel-conversion-factors for Hydrogen</p> <p></p>"},{"location":"modules/Global/#mps_to_mph","title":"mps_to_mph","text":"<p>1 mps = 2.23694 mph</p> <p></p>"},{"location":"modules/Global/#m_to_mi","title":"m_to_mi","text":"<p>1 m = 0.000621371 mi</p> <p></p>"},{"location":"modules/Global/#set_tco_intermediates","title":"set_tco_intermediates","text":"Python<pre><code>def set_tco_intermediates()\n</code></pre> <p>This function sets path for TCO_INTERMEDIATES to save tsv files</p> <p></p>"},{"location":"modules/Global/#set_tco_results","title":"set_tco_results","text":"Python<pre><code>def set_tco_results()\n</code></pre> <p>This function sets path for TCO_RESULTS</p> <p></p>"},{"location":"modules/Global/#kg_to_lbs","title":"kg_to_lbs","text":"Python<pre><code>def kg_to_lbs(kgs: float) -&gt; float\n</code></pre> <p>This function converts kg to lb</p> <p>Arguments:</p> <ul> <li><code>kgs</code> float - mass in kg</li> </ul> <p>Returns:</p> <ul> <li><code>(float)</code> - mass in pounds</li> </ul> <p></p>"},{"location":"modules/Global/#lbs_to_kgs","title":"lbs_to_kgs","text":"Python<pre><code>def lbs_to_kgs(lbs: float) -&gt; float\n</code></pre> <p>This function converts lb to kg</p> <p>Arguments:</p> <ul> <li><code>lbs</code> float - mass in pounds</li> </ul> <p>Returns:</p> <ul> <li><code>(float)</code> - mass in kg</li> </ul> <p></p>"},{"location":"modules/Global/#not_falsy","title":"not_falsy","text":"Python<pre><code>def not_falsy(var: float) -&gt; bool\n</code></pre> <p>This function returns True to verify that var is NOT falsy: not in [None, np.nan, 0, False]</p> <p>Arguments:</p> <ul> <li><code>var</code> float - variable to check</li> </ul> <p>Returns:</p> <ul> <li><code>(bool)</code> - True if not in [None, 0, False]</li> </ul>"},{"location":"modules/capital_costs/","title":"Table of Contents","text":"<ul> <li>t3co/cost_models/capital_costs</li> <li>CapitalCosts<ul> <li>__new__</li> <li>__init__</li> <li>set_glider_cost</li> <li>set_fuel_converter_cost_dol</li> <li>set_fuel_storage_cost</li> <li>set_motor_control_power_elecs_cost</li> <li>set_plug_cost</li> <li>set_battery_cost</li> <li>set_msrp</li> <li>set_purchase_tax</li> <li>set_downpayment</li> <li>set_residual_cost</li> <li>set_net_capital_cost</li> <li>set_disc_residual_cost</li> <li>get_marked_up_value</li> </ul> </li> </ul>"},{"location":"modules/capital_costs/#t3cocost_modelscapital_costs","title":"t3co/cost_models/capital_costs","text":""},{"location":"modules/capital_costs/#capitalcosts-objects","title":"CapitalCosts Objects","text":"Python<pre><code>class CapitalCosts()\n</code></pre>"},{"location":"modules/capital_costs/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the CapitalCosts class.</p> <p></p>"},{"location":"modules/capital_costs/#__init__","title":"__init__","text":"Python<pre><code>def __init__(vehicle: Vehicle,\n             scenario: Scenario,\n             msrp_total_dol: float = None)\n</code></pre> <p>Initializes the CapitalCosts instance.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>msrp_total_dol</code> float, optional - MSRP in dollars as input</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_glider_cost","title":"set_glider_cost","text":"Python<pre><code>def set_glider_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the glider cost for the vehicle.</p> <p>This method calculates the marked up glider cost based on the vehicle class and the base cost.</p> <p>Inputs from scenario: - vehicle_glider_cost_dol</p> <p>Estimated class variables: - glider_cost_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the base cost for the glider.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_fuel_converter_cost_dol","title":"set_fuel_converter_cost_dol","text":"Python<pre><code>def set_fuel_converter_cost_dol(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the fuel converter cost for the vehicle.</p> <p>This method calculates the marked up fuel converter cost based on the vehicle powertrain type and the cost per kW.</p> <p>Inputs from vehicle: - fc_max_kw</p> <p>Inputs from scenario: - fc_fuelcell_cost_dol_per_kw - fc_ice_cost_dol_per_kw - fc_cng_ice_cost_dol_per_kw - fc_ice_base_cost_dol</p> <p>Estimated class variables: - fuel_converter_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kW for the fuel converter.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_fuel_storage_cost","title":"set_fuel_storage_cost","text":"Python<pre><code>def set_fuel_storage_cost(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the fuel storage cost for the vehicle.</p> <p>This method calculates the marked up fuel storage cost based on the vehicle powertrain type and the cost per kWh.</p> <p>Inputs from vehicle: - fs_kwh</p> <p>Inputs from scenario: - fs_h2_cost_dol_per_kwh - fs_cng_cost_dol_per_kwh - fs_cost_dol_per_kwh</p> <p>Estimated class variables: - fuel_storage_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kWh for the fuel storage.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_motor_control_power_elecs_cost","title":"set_motor_control_power_elecs_cost","text":"Python<pre><code>def set_motor_control_power_elecs_cost(vehicle: Vehicle,\n                                       scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the motor control and power electronics cost for the vehicle.</p> <p>This method calculates the marked up motor control and power electronics cost based on the vehicle powertrain type and the cost per kW.</p> <p>Inputs from vehicle: - mc_max_kw</p> <p>Inputs from scenario: - pe_mc_base_cost_dol - pe_mc_cost_dol_per_kw</p> <p>Estimated class variables: - motor_control_power_elecs_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kW for the motor control and power electronics.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_plug_cost","title":"set_plug_cost","text":"Python<pre><code>def set_plug_cost(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the plug cost for the vehicle.</p> <p>This method calculates the marked up plug cost based on the base cost.</p> <p>Inputs from scenario: - plug_base_cost_dol</p> <p>Estimated class variables: - plug_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the base cost for the plug.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_battery_cost","title":"set_battery_cost","text":"Python<pre><code>def set_battery_cost(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the battery cost for the vehicle.</p> <p>This method calculates the marked up battery cost based on the energy storage system (ESS) capacity and the cost per kWh.</p> <p>Inputs from vehicle: - ess_max_kwh</p> <p>Inputs from scenario: - ess_base_cost_dol - ess_cost_dol_per_kwh</p> <p>Estimated class variables: - battery_cost_dol</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the cost per kWh for the battery.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_msrp","title":"set_msrp","text":"Python<pre><code>def set_msrp() -&gt; None\n</code></pre> <p>Calculates the total MSRP (Manufacturer's Suggested Retail Price) for the vehicle.</p> <p>This method calculates the total MSRP by summing the costs of various components of the vehicle. The calculation uses the following CapitalCosts elements: - glider_cost_dol - fuel_storage_cost_dol - fuel_converter_cost_dol - motor_control_power_elecs_cost_dol - battery_cost_dol - plug_cost_dol</p> <p>Estimated class variables: - msrp_total_dol</p> <p></p>"},{"location":"modules/capital_costs/#set_purchase_tax","title":"set_purchase_tax","text":"Python<pre><code>def set_purchase_tax(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the purchase tax for the vehicle.</p> <p>This method calculates the purchase tax based on the total MSRP (Manufacturer's Suggested Retail Price) of the vehicle components. The calculations use the following CapitalCosts elements: - msrp_total_dol</p> <p>Inputs from scenario: - tax_rate_pct</p> <p>Estimated class variables: - purchase_tax_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the tax rate.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_downpayment","title":"set_downpayment","text":"Python<pre><code>def set_downpayment(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the downpayment and initial principal for the vehicle purchase.</p> <p>This method calculates the downpayment and initial principal based on the purchasing method specified in the scenario. The calculations use the following CapitalCosts elements: - msrp_total_dol - purchase_tax_dol</p> <p>Inputs from scenario: - purchasing_method - purchasing_down_payment_pct - purchasing_interest_apr_pct_per_yr</p> <p>Estimated class variables: - purchasing_downpayment_dol - purchasing_initial_principal_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the purchasing method, down payment percentage, and interest rate.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_residual_cost","title":"set_residual_cost","text":"Python<pre><code>def set_residual_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the residual cost for the vehicle.</p> <p>This method calculates the residual cost based on the total MSRP (Manufacturer's Suggested Retail Price) of the vehicle components, the depreciation rates per year, and the vehicle's life span. The residual cost is the remaining value of the vehicle after depreciation. The calculation uses the following CapitalCosts elements: - msrp_total_dol</p> <p>Inputs from scenario: - depreciation_rates_pct_per_yr - vehicle_life_yr</p> <p>Estimated scenario variables: - residual_rate_pct</p> <p>Estimated class variables: - residual_cost_dol</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including depreciation rates and vehicle life span.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#set_net_capital_cost","title":"set_net_capital_cost","text":"Python<pre><code>def set_net_capital_cost() -&gt; None\n</code></pre> <p>Sets the total capital cost for the vehicle.</p> <p>This method calculates the total capital cost by summing the costs of various components and applying the purchase tax. The calculation uses the following CapitalCosts elements: - purchasing_downpayment_dol</p> <p>Inputs from scenario: - tax_rate_pct</p> <p>Estimated class variables: - net_capital_cost_dol</p> <p></p>"},{"location":"modules/capital_costs/#set_disc_residual_cost","title":"set_disc_residual_cost","text":"Python<pre><code>def set_disc_residual_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the discounted residual cost for the vehicle.</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/capital_costs/#get_marked_up_value","title":"get_marked_up_value","text":"Python<pre><code>def get_marked_up_value(value: float, scenario: Scenario) -&gt; float\n</code></pre> <p>Returns the marked up value.</p> <p>Arguments:</p> <ul> <li><code>value</code> float - The value to mark up.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p>Returns:</p> <ul> <li><code>float</code> - The marked up value.</li> </ul>"},{"location":"modules/charts/","title":"Table of Contents","text":"<ul> <li>t3co/visualize/charts</li> </ul>"},{"location":"modules/charts/#t3covisualizecharts","title":"t3co/visualize/charts","text":""},{"location":"modules/config/","title":"Table of Contents","text":"<ul> <li>t3co/input_data/config</li> <li>Config<ul> <li>__new__</li> <li>from_file</li> <li>from_dict</li> <li>validate_analysis_id</li> <li>check_drivecycles_and_create_selections</li> <li>read_auxiliary_files</li> <li>delete_dataframes</li> </ul> </li> </ul>"},{"location":"modules/config/#t3coinput_dataconfig","title":"t3co/input_data/config","text":""},{"location":"modules/config/#config-objects","title":"Config Objects","text":"Python<pre><code>@dataclass\nclass Config()\n</code></pre>"},{"location":"modules/config/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Config class.</p> <p></p>"},{"location":"modules/config/#from_file","title":"from_file","text":"Python<pre><code>def from_file(\n        analysis_id: int = 0,\n        filename: str = gl.RESOURCES_FOLDERPATH / \"T3COConfig.csv\") -&gt; Self\n</code></pre> <p>Generates a Config dictionary from CSV file and calls Config.from_dict.</p> <p>Arguments:</p> <ul> <li><code>filename</code> str - Path of input T3CO Config file.</li> <li><code>analysis_id</code> int - Analysis ID selections.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - Config instance containing all values from T3CO Config CSV file.</li> </ul> <p></p>"},{"location":"modules/config/#from_dict","title":"from_dict","text":"Python<pre><code>def from_dict(config_dict: dict) -&gt; Self\n</code></pre> <p>Generates a Config instance from config_dict.</p> <p>Arguments:</p> <ul> <li><code>config_dict</code> dict - Dictionary containing fields from T3CO Config input CSV file.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - Config instance containing all values from T3CO Config CSV file.</li> </ul> <p></p>"},{"location":"modules/config/#validate_analysis_id","title":"validate_analysis_id","text":"Python<pre><code>def validate_analysis_id() -&gt; pd.DataFrame\n</code></pre> <p>Validates that the correct analysis ID is input.</p> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code> - DataFrame containing the configuration data for the given analysis ID.</li> </ul> <p>Raises:</p> <ul> <li><code>Exception</code> - If analysis_id is not found or config file does not exist.</li> </ul> <p></p>"},{"location":"modules/config/#check_drivecycles_and_create_selections","title":"check_drivecycles_and_create_selections","text":"Python<pre><code>def check_drivecycles_and_create_selections() -&gt; None\n</code></pre> <p>Checks if the config.drive_cycle input is a file or a folder. If a folder is provided, creates a list of all selections for each drive cycle in the folder as config.dc_files.</p> <p></p>"},{"location":"modules/config/#read_auxiliary_files","title":"read_auxiliary_files","text":"Python<pre><code>def read_auxiliary_files() -&gt; None\n</code></pre> <p>Reads auxiliary files such as fuel prices and residual rates.</p> <p></p>"},{"location":"modules/config/#delete_dataframes","title":"delete_dataframes","text":"Python<pre><code>def delete_dataframes() -&gt; None\n</code></pre> <p>Deletes DataFrame attributes from the Config instance.</p>"},{"location":"modules/demo_files_installer/","title":"Table of Contents","text":"<ul> <li>t3co/utils/demo_files_installer</li> <li>main</li> <li>copy_demo_input_files</li> </ul>"},{"location":"modules/demo_files_installer/#t3coutilsdemo_files_installer","title":"t3co/utils/demo_files_installer","text":""},{"location":"modules/demo_files_installer/#main","title":"main","text":"Python<pre><code>def main()\n</code></pre> <p>Requests user inputs for whether and where to copy t3co demo input files from the t3co.resources folder. Calls the copy_demo_input_files function.</p> <p></p>"},{"location":"modules/demo_files_installer/#copy_demo_input_files","title":"copy_demo_input_files","text":"Python<pre><code>def copy_demo_input_files(destination_path: Union[str, Path]) -&gt; None\n</code></pre> <p>Copies the t3co.resources folder that includes demo input files to a user input destination_path.</p> <p>Arguments:</p> <ul> <li><code>destination_path</code> Union[str, Path] - Path of destination directory for copying t3co.resources folder.</li> </ul>"},{"location":"modules/energy/","title":"Table of Contents","text":"<ul> <li>t3co/energy_models/energy</li> <li>Energy<ul> <li>__new__</li> <li>__init__</li> <li>run_fastsim_model</li> </ul> </li> </ul>"},{"location":"modules/energy/#t3coenergy_modelsenergy","title":"t3co/energy_models/energy","text":""},{"location":"modules/energy/#energy-objects","title":"Energy Objects","text":"Python<pre><code>@dataclass\nclass Energy()\n</code></pre>"},{"location":"modules/energy/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Energy class.</p> <p></p>"},{"location":"modules/energy/#__init__","title":"__init__","text":"Python<pre><code>def __init__(mpgge: float = None, primary_fuel_range_mi: float = None)\n</code></pre> <p>Initializes the Energy instance.</p> <p>Arguments:</p> <ul> <li><code>mpgge</code> float, optional - Miles per gallon gasoline equivalent. Defaults to None.</li> <li><code>primary_fuel_range_mi</code> float, optional - Primary fuel range in miles. Defaults to None.</li> </ul> <p></p>"},{"location":"modules/energy/#run_fastsim_model","title":"run_fastsim_model","text":"Python<pre><code>def run_fastsim_model(\n    veh_no: int,\n    scenario: Scenario,\n    vehicle_file: Union[str, Path] = gl.RESOURCES_FOLDERPATH / \"inputs\" /\n    \"Demo_FY22_vehicle_model_assumptions.csv\"\n) -&gt; None\n</code></pre> <p>Runs the FASTSim model to calculate mpgge and primary fuel range.</p> <p>Arguments:</p> <ul> <li><code>veh_no</code> int - Vehicle selection number.</li> <li><code>scenario</code> Scenario - Scenario instance containing configuration data.</li> <li><code>vehicle_file</code> Union[str, Path], optional - Vehicle model assumptions input CSV file path. Defaults to gl.RESOURCES_FOLDERPATH / \"inputs\" / \"Demo_FY22_vehicle_model_assumptions.csv\".</li> </ul>"},{"location":"modules/fastsim_wrapper/","title":"Table of Contents","text":"<ul> <li>t3co/energy_models/fastsim_model/fastsim_wrapper</li> <li>RunFastsim<ul> <li>__new__</li> <li>load_vehicle</li> <li>load_design_cycle_from_scenario</li> <li>load_design_cycle_from_path</li> <li>get_simdrive</li> <li>get_range</li> </ul> </li> </ul>"},{"location":"modules/fastsim_wrapper/#t3coenergy_modelsfastsim_modelfastsim_wrapper","title":"t3co/energy_models/fastsim_model/fastsim_wrapper","text":""},{"location":"modules/fastsim_wrapper/#runfastsim-objects","title":"RunFastsim Objects","text":"Python<pre><code>class RunFastsim()\n</code></pre>"},{"location":"modules/fastsim_wrapper/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the RunFastsim class.</p> <p></p>"},{"location":"modules/fastsim_wrapper/#load_vehicle","title":"load_vehicle","text":"Python<pre><code>def load_vehicle(veh_no: int,\n                 veh_input_path: Union[str, Path],\n                 use_rust: bool = True) -&gt; fastsim.vehicle.Vehicle\n</code></pre> <p>Loads vehicle object from vehicle number and input CSV filepath.</p> <p>Arguments:</p> <ul> <li><code>veh_no</code> int - Vehicle selection number.</li> <li><code>veh_input_path</code> Union[str, Path] - Vehicle model assumptions input CSV file path.</li> </ul> <p>Returns:</p> <ul> <li><code>fastsim.vehicle.Vehicle</code> - FASTSim vehicle object.</li> </ul> <p></p>"},{"location":"modules/fastsim_wrapper/#load_design_cycle_from_scenario","title":"load_design_cycle_from_scenario","text":"Python<pre><code>def load_design_cycle_from_scenario(\n    scenario: Scenario,\n    cyc_file_path: Union[str, Path] = gl.CYCLES_FOLDER,\n    return_rustcycle: bool = True\n) -&gt; Union[fastsim.cycle.Cycle, List[fastsim.cycle.Cycle]]\n</code></pre> <p>Loads the design cycle used for mpgge and range determination.</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - Scenario object for current selection.</li> <li><code>cyc_file_path</code> Union[str, Path], optional - Drive cycle input file path. Defaults to gl.CYCLES_FOLDER.</li> </ul> <p>Returns:</p> <p>Union[fastsim.cycle.Cycle, List[fastsim.cycle.Cycle]]: FASTSim cycle object for current Scenario object.</p> <p></p>"},{"location":"modules/fastsim_wrapper/#load_design_cycle_from_path","title":"load_design_cycle_from_path","text":"Python<pre><code>def load_design_cycle_from_path(\n    cyc_file_path: Union[str, Path],\n    return_rustcycle: bool = True\n) -&gt; Union[fastsim.cycle.RustCycle, fastsim.cycle.Cycle]\n</code></pre> <p>Loads the Cycle object from the drive cycle filepath.</p> <p>Arguments:</p> <ul> <li><code>cyc_file_path</code> Union[str, Path] - Drive cycle input file path.</li> </ul> <p>Returns:</p> <ul> <li><code>fastsim.cycle.Cycle</code> - FASTSim cycle object for current Scenario object.</li> </ul> <p></p>"},{"location":"modules/fastsim_wrapper/#get_simdrive","title":"get_simdrive","text":"Python<pre><code>def get_simdrive(\n        cycle: fastsim.cycle.Cycle) -&gt; fastsim.fastsimrust.RustSimDrive\n</code></pre> <p>Creates a SimDrive object for the given cycle and vehicle.</p> <p>Arguments:</p> <ul> <li><code>cycle</code> fastsim.cycle.Cycle - The drive cycle.</li> </ul> <p>Returns:</p> <ul> <li><code>fastsim.fastsimrust.RustSimDrive</code> - The RustSimDrive object.</li> </ul> <p></p>"},{"location":"modules/fastsim_wrapper/#get_range","title":"get_range","text":"Python<pre><code>def get_range() -&gt; None\n</code></pre> <p>Calculates the range of the vehicle based on its type and energy storage.</p>"},{"location":"modules/ledger/","title":"Table of Contents","text":"<ul> <li>t3co/tco/ledger</li> <li>Ledger<ul> <li>__new__</li> <li>__init__</li> <li>set_discounted_costs</li> <li>set_discounted_tco</li> <li>set_cost_components</li> <li>to_dict</li> <li>to_json</li> <li>to_df</li> <li>to_csv</li> <li>__str__</li> </ul> </li> </ul>"},{"location":"modules/ledger/#t3cotcoledger","title":"t3co/tco/ledger","text":""},{"location":"modules/ledger/#ledger-objects","title":"Ledger Objects","text":"Python<pre><code>class Ledger()\n</code></pre>"},{"location":"modules/ledger/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Ledger class.</p> <p></p>"},{"location":"modules/ledger/#__init__","title":"__init__","text":"Python<pre><code>def __init__(vehicle: Vehicle,\n             scenario: Scenario,\n             energy: Energy = None,\n             config: Config = None)\n</code></pre> <p>Initializes the Ledger instance.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy, optional - The energy instance. Defaults to None.</li> <li><code>config</code> Config, optional - The configuration instance. Defaults to None.</li> </ul> <p></p>"},{"location":"modules/ledger/#set_discounted_costs","title":"set_discounted_costs","text":"Python<pre><code>def set_discounted_costs()\n</code></pre> <p>Sets the discounted cost components for the Ledger instance.</p> <p></p>"},{"location":"modules/ledger/#set_discounted_tco","title":"set_discounted_tco","text":"Python<pre><code>def set_discounted_tco()\n</code></pre> <p>Sets the discounted TCO for the Ledger instance.</p> <p></p>"},{"location":"modules/ledger/#set_cost_components","title":"set_cost_components","text":"Python<pre><code>def set_cost_components()\n</code></pre> <p>Sets the cost components for the Ledger instance.</p> <p></p>"},{"location":"modules/ledger/#to_dict","title":"to_dict","text":"Python<pre><code>def to_dict(include_prefix: bool = True, flatten: bool = True) -&gt; dict\n</code></pre> <p>Exports the Ledger instance to a dictionary.</p> <p>Arguments:</p> <ul> <li><code>include_prefix</code> bool, optional - If True, exported column names contain the T3CO submodule names as prefix. Defaults to True.</li> <li><code>flatten</code> bool, optional - If True, the nested dict output flattens to a single dictionary. Defaults to True.</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code> - The Ledger instance as a dictionary.</li> </ul> <p></p>"},{"location":"modules/ledger/#to_json","title":"to_json","text":"Python<pre><code>def to_json(filepath: Union[str, Path],\n            include_prefix: bool = True,\n            flatten: bool = True) -&gt; None\n</code></pre> <p>Saves the Ledger instance to a JSON file.</p> <p>Arguments:</p> <ul> <li><code>filepath</code> Union[str, Path] - The file path where the JSON will be saved.</li> <li><code>include_prefix</code> bool, optional - If True, exported column names contain the T3CO submodule names as prefix. Defaults to True.</li> <li><code>flatten</code> bool, optional - If True, the nested dict output flattens to a single dictionary. Defaults to True.</li> </ul> <p></p>"},{"location":"modules/ledger/#to_df","title":"to_df","text":"Python<pre><code>def to_df() -&gt; pd.DataFrame\n</code></pre> <p>Converts the Ledger instance to a DataFrame.</p> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code> - The Ledger instance as a DataFrame.</li> </ul> <p></p>"},{"location":"modules/ledger/#to_csv","title":"to_csv","text":"Python<pre><code>def to_csv(filepath: Union[str, Path]) -&gt; None\n</code></pre> <p>Saves the Ledger instance to a CSV file.</p> <p>Arguments:</p> <ul> <li><code>filepath</code> Union[str, Path] - The file path where the CSV will be saved.</li> </ul> <p></p>"},{"location":"modules/ledger/#__str__","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the Ledger instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the Ledger instance.</li> </ul>"},{"location":"modules/operating_costs/","title":"Table of Contents","text":"<ul> <li>t3co/cost_models/operating_costs</li> <li>OperatingCosts<ul> <li>__new__</li> <li>__init__</li> <li>set_fuel_cost</li> <li>set_maintenance_oper_cost</li> <li>set_insurance_cost</li> <li>set_purchasing_payment_cost</li> <li>set_fueling_dwell_labor_cost</li> <li>set_net_oper_cost</li> <li>set_disc_oper_cost</li> <li>__str__</li> </ul> </li> </ul>"},{"location":"modules/operating_costs/#t3cocost_modelsoperating_costs","title":"t3co/cost_models/operating_costs","text":""},{"location":"modules/operating_costs/#operatingcosts-objects","title":"OperatingCosts Objects","text":"Python<pre><code>class OperatingCosts()\n</code></pre>"},{"location":"modules/operating_costs/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the OperatingCosts class.</p> <p></p>"},{"location":"modules/operating_costs/#__init__","title":"__init__","text":"Python<pre><code>def __init__(year_number: int,\n             cap_costs: CapitalCosts,\n             vehicle: Vehicle,\n             scenario: Scenario,\n             energy: Energy = None,\n             oppy_costs: OpportunityCosts = None)\n</code></pre> <p>Initializes the OperatingCosts instance.</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the operating costs are calculated.</li> <li><code>cap_costs</code> CapitalCosts - The capital costs associated with the vehicle.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>energy</code> Energy - The energy model instance.</li> <li><code>oppy_costs</code> OpportunityCosts - The opportunity costs associated with the vehicle.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#set_fuel_cost","title":"set_fuel_cost","text":"Python<pre><code>def set_fuel_cost(year_number: int, vehicle: Vehicle,\n                  scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the fuel cost for the given year.</p> <p>This method calculates the fuel cost based on the fuel price and the amount of fuel used. The calculation uses the following OperatingCosts elements: - distance_traveled_mi_per_yr - mpgge</p> <p>Inputs from scenario: - fuel_prices_df - fuel_type - model_year - region</p> <p>Estimated class variables: - fuel_price_dol_per_gge - fuel_used_gal_gge_per_yr - fuel_used_gal_gde_per_yr - energy_used_kwh_per_yr - fuel_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the fuel cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#set_maintenance_oper_cost","title":"set_maintenance_oper_cost","text":"Python<pre><code>def set_maintenance_oper_cost(year_number: int, vehicle: Vehicle,\n                              scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the maintenance operating cost for the given year.</p> <p>This method calculates the maintenance cost based on the maintenance cost per mile and the distance traveled.</p> <p>Inputs from scenario: - maint_oper_cost_dol_per_mi - vmt</p> <p>Estimated class variables: - maintenance_cost_dol_per_mi - maintenance_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the maintenance cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#set_insurance_cost","title":"set_insurance_cost","text":"Python<pre><code>def set_insurance_cost(year_number: int, cap_cost: CapitalCosts,\n                       vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the insurance cost for the given year.</p> <p>This method calculates the insurance cost based on the insurance rate and the total value of the vehicle.</p> <p>Inputs from scenario: - insurance_rates_pct_per_yr</p> <p>Inputs from cap_cost: - msrp_total_dol</p> <p>Estimated class variables: - insurance_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the insurance cost is calculated.</li> <li><code>cap_cost</code> CapitalCosts - The capital costs associated with the vehicle.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#set_purchasing_payment_cost","title":"set_purchasing_payment_cost","text":"Python<pre><code>def set_purchasing_payment_cost(year_number: int, scenario: Scenario,\n                                cap_costs: CapitalCosts)\n</code></pre> <p>Sets the purchasing payment cost for the given year.</p> <p>This method calculates the purchasing payment cost based on the purchasing method specified in the scenario.</p> <p>Inputs from scenario: - purchasing_method - purchasing_interest_apr_pct_per_yr - purchasing_payment_frequency_months - purchasing_term_yr - tax_rate_pct - leasing_money_factor</p> <p>Inputs from cap_costs: - purchasing_initial_principal_dol - msrp_total_dol - purchase_tax_dol - purchasing_downpayment_dol - residual_cost_dol</p> <p>Estimated OperatingCosts variables: - purchasing_payment_dol_per_yr - purchasing_cost_dol_per_yr - purchasing_remaining_principal_dol - purchasing_tax_amount_dol_per_year</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the purchasing payment cost is calculated.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data, including the purchasing method, interest rate, and term.</li> <li><code>cap_costs</code> CapitalCosts - The capital costs associated with the vehicle.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#set_fueling_dwell_labor_cost","title":"set_fueling_dwell_labor_cost","text":"Python<pre><code>def set_fueling_dwell_labor_cost(scenario: Scenario,\n                                 oppy_costs: OpportunityCosts) -&gt; None\n</code></pre> <p>Sets the fueling dwell labor cost for the given year.</p> <p>This method calculates the fueling dwell labor cost based on the fueling dwell time and the labor rate.</p> <p>Inputs from scenario: - labor_rate_dol_per_hr</p> <p>Inputs from oppy_costs: - fueling_dwell_time_hr_per_yr</p> <p>Estimated OperatingCosts variables: - fueling_dwell_labor_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>oppy_costs</code> OpportunityCosts - The opportunity costs associated with the vehicle.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#set_net_oper_cost","title":"set_net_oper_cost","text":"Python<pre><code>def set_net_oper_cost() -&gt; None\n</code></pre> <p>Sets the net operating cost for the given year.</p> <p>This method calculates the net operating cost by summing the various operating cost components. The calculation uses the following OperatingCosts elements: - fuel_cost_dol_per_yr - fueling_dwell_labor_cost_dol_per_yr - maintenance_cost_dol_per_yr - insurance_cost_dol_per_yr - purchasing_payment_dol_per_yr</p> <p>Estimated OperatingCosts variables: - net_oper_cost_dol_per_yr</p> <p></p>"},{"location":"modules/operating_costs/#set_disc_oper_cost","title":"set_disc_oper_cost","text":"Python<pre><code>def set_disc_oper_cost(year_number: int, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the discounted operating cost for the given year.</p> <p>This method calculates the discounted operating cost based on the net operating cost and the discount rate. The calculation uses the following OperatingCosts elements: - net_oper_cost_dol_per_yr</p> <p>Inputs from scenario: - discount_rate_pct_per_yr</p> <p>Estimated OperatingCosts variables: - disc_oper_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the discounted operating cost is calculated.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/operating_costs/#__str__","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the OperatingCosts instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the OperatingCosts instance.</li> </ul>"},{"location":"modules/opportunity_costs/","title":"Table of Contents","text":"<ul> <li>t3co/cost_models/opportunity_costs</li> <li>OpportunityCosts<ul> <li>__new__</li> <li>__init__</li> <li>set_payload_cap_cost_multiplier</li> <li>set_fueling_dwell_time_cost</li> <li>set_mr_downtime_cost</li> <li>set_net_downtime_oppy_cost</li> <li>set_disc_downtime_oppy_cost</li> <li>__str__</li> </ul> </li> </ul>"},{"location":"modules/opportunity_costs/#t3cocost_modelsopportunity_costs","title":"t3co/cost_models/opportunity_costs","text":""},{"location":"modules/opportunity_costs/#opportunitycosts-objects","title":"OpportunityCosts Objects","text":"Python<pre><code>class OpportunityCosts()\n</code></pre>"},{"location":"modules/opportunity_costs/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the OpportunityCosts class.</p> <p></p>"},{"location":"modules/opportunity_costs/#__init__","title":"__init__","text":"Python<pre><code>def __init__(year_number: int, vehicle: Vehicle, scenario: Scenario,\n             energy: Energy)\n</code></pre> <p>Initializes the OpportunityCosts instance.</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the opportunity costs are calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>energy</code> Energy - The energy model instance.</li> </ul> <p></p>"},{"location":"modules/opportunity_costs/#set_payload_cap_cost_multiplier","title":"set_payload_cap_cost_multiplier","text":"Python<pre><code>def set_payload_cap_cost_multiplier(vehicle: Vehicle,\n                                    scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the payload capacity cost multiplier for the vehicle.</p> <p>This method calculates the payload capacity cost multiplier based on the vehicle's weight and the scenario's weight distribution.</p> <p>Inputs from scenario: - plf_weight_distribution_file - plf_ref_veh_empty_mass_kg - gvwr_kg - gvwr_credit_kg</p> <p>Inputs from vehicle: - veh_kg - cargo_kg</p> <p>Estimated class variables: - payload_cap_cost_multiplier</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/opportunity_costs/#set_fueling_dwell_time_cost","title":"set_fueling_dwell_time_cost","text":"Python<pre><code>def set_fueling_dwell_time_cost(year_number: int, vehicle: Vehicle,\n                                scenario: Scenario, energy: Energy) -&gt; None\n</code></pre> <p>Calculates the fueling dwell time cost for a vehicle based on fuel fill rate/charging power and shifts per year.</p> <p>Inputs from scenario: - fdt_frac_full_charge_bounds - shifts_per_year - constant_trip_distance_mi - vmt - fdt_dwpt_fraction_power_pct - ess_max_charging_power_kw - fs_fueling_rate_gasoline_gpm - fs_fueling_rate_diesel_gpm - fdt_num_free_dwell_trips - fdt_avg_overhead_hr_per_dwell_hr - fdt_available_freetime_hr - downtime_oppy_cost_dol_per_hr</p> <p>Inputs from vehicle: - veh_pt_type - ess_max_kwh - fs_kwh</p> <p>Inputs from energy: - primary_fuel_range_mi</p> <p>Estimated OpportunityCosts variables: - fdt_frac_full_charge_bounds - shifts_per_year - fdt_full_dwell_hr - trip_distance_mi - fdt_num_of_dwells - fueling_dwell_time_hr_per_yr - fueling_downtime_oppy_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the fueling dwell time cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> <li><code>energy</code> Energy - The energy model instance.</li> </ul> <p></p>"},{"location":"modules/opportunity_costs/#set_mr_downtime_cost","title":"set_mr_downtime_cost","text":"Python<pre><code>def set_mr_downtime_cost(year_number: int, vehicle: Vehicle,\n                         scenario: Scenario) -&gt; None\n</code></pre> <p>Calculates the Maintenance and Repair (M&amp;R) downtime cost based on planned, unplanned, and tire replacement downtime inputs.</p> <p>Inputs from scenario: - mr_planned_downtime_hr_per_yr - mr_unplanned_downtime_hr_per_mi - vmt - mr_avg_tire_life_mi - mr_tire_replace_downtime_hr_per_event - downtime_oppy_cost_dol_per_hr</p> <p>Estimated OpportunityCosts variables: - mr_planned_downtime_hr - mr_unplanned_downtime_hr - mr_tire_replacement_downtime_hr - mr_downtime_hr_per_yr - mr_downtime_oppy_cost_dol_per_yr</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the M&amp;R downtime cost is calculated.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/opportunity_costs/#set_net_downtime_oppy_cost","title":"set_net_downtime_oppy_cost","text":"Python<pre><code>def set_net_downtime_oppy_cost() -&gt; None\n</code></pre> <p>Sets the net downtime opportunity cost for the vehicle.</p> <p>This method calculates the net downtime opportunity cost by summing the fueling downtime and MR downtime opportunity costs. The calculation uses the following OpportunityCosts elements: - fueling_downtime_oppy_cost_dol_per_yr - mr_downtime_oppy_cost_dol_per_yr - fueling_dwell_time_hr_per_yr - mr_downtime_hr_per_yr</p> <p>Estimated OpportunityCosts variables: - net_downtime_oppy_cost_dol_per_yr - net_downtime_hr_per_yr</p> <p></p>"},{"location":"modules/opportunity_costs/#set_disc_downtime_oppy_cost","title":"set_disc_downtime_oppy_cost","text":"Python<pre><code>def set_disc_downtime_oppy_cost(year_number: int, scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the discounted downtime opportunity cost for the given year.</p> <p>Inputs from scenario: - discount_rate_pct_per_yr</p> <p>Estimated class variables: - disc_downtime_oppy_cost_dol</p> <p>Arguments:</p> <ul> <li><code>year_number</code> int - The year number for which the discounted downtime opportunity cost is calculated.</li> <li><code>scenario</code> Scenario - The scenario instance containing configuration data.</li> </ul> <p></p>"},{"location":"modules/opportunity_costs/#__str__","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the OpportunityCosts instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the OpportunityCosts instance.</li> </ul>"},{"location":"modules/print_class_objects/","title":"Table of Contents","text":"<ul> <li>t3co/utils/print_class_objects</li> <li>obj_to_string</li> <li>handle_nan</li> <li>custom_default</li> <li>to_flat_dict</li> <li>remove_df_attrs</li> </ul>"},{"location":"modules/print_class_objects/#t3coutilsprint_class_objects","title":"t3co/utils/print_class_objects","text":""},{"location":"modules/print_class_objects/#obj_to_string","title":"obj_to_string","text":"Python<pre><code>def obj_to_string(obj: Union[object, List[object]],\n                  extra: str = \"    \") -&gt; str\n</code></pre> <p>Converts an object or list of objects to a formatted string representation.</p> <p>Arguments:</p> <ul> <li><code>obj</code> Union[object, List[object]] - The object or list of objects to convert.</li> <li><code>extra</code> str, optional - Indentation string for nested objects. Defaults to \"    \".</li> </ul> <p>Returns:</p> <ul> <li><code>str</code> - Formatted string representation of the object.</li> </ul> <p></p>"},{"location":"modules/print_class_objects/#handle_nan","title":"handle_nan","text":"Python<pre><code>def handle_nan(\n        obj: Union[float, dict, list]) -&gt; Union[None, dict, list, float]\n</code></pre> <p>Replaces NaN values in an object with None.</p> <p>Arguments:</p> <ul> <li><code>obj</code> Union[float, dict, list] - The object to process.</li> </ul> <p>Returns:</p> <p>Union[None, dict, list, float]: The processed object with NaN values replaced by None.</p> <p></p>"},{"location":"modules/print_class_objects/#custom_default","title":"custom_default","text":"Python<pre><code>def custom_default(obj: object) -&gt; Union[None, dict, str]\n</code></pre> <p>Custom default function for JSON serialization.</p> <p>Arguments:</p> <ul> <li><code>obj</code> object - The object to serialize.</li> </ul> <p>Returns:</p> <p>Union[None, dict, str]: The serialized object.</p> <p></p>"},{"location":"modules/print_class_objects/#to_flat_dict","title":"to_flat_dict","text":"Python<pre><code>def to_flat_dict(obj: object,\n                 include_predix: bool = True,\n                 prefix: str = \"\",\n                 delimiter: str = \"_\") -&gt; dict\n</code></pre> <p>Flattens a nested object into a dictionary.</p> <p>Arguments:</p> <ul> <li><code>obj</code> object - The object to flatten.</li> <li><code>include_predix</code> bool, optional - Whether to include the prefix in the keys. Defaults to True.</li> <li><code>prefix</code> str, optional - The prefix for the keys. Defaults to \"\".</li> <li><code>delimiter</code> str, optional - The delimiter for the keys. Defaults to \"_\".</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code> - The flattened dictionary.</li> </ul> <p></p>"},{"location":"modules/print_class_objects/#remove_df_attrs","title":"remove_df_attrs","text":"Python<pre><code>def remove_df_attrs(obj: object) -&gt; None\n</code></pre> <p>Removes DataFrame attributes from an object.</p> <p>Arguments:</p> <ul> <li><code>obj</code> object - The object to process.</li> </ul>"},{"location":"modules/scenario/","title":"Table of Contents","text":"<ul> <li>t3co/input_data/scenario</li> <li>Scenario<ul> <li>__new__</li> <li>from_file</li> <li>override_from_config</li> <li>get_discounted_value</li> <li>delete_dataframes</li> </ul> </li> </ul>"},{"location":"modules/scenario/#t3coinput_datascenario","title":"t3co/input_data/scenario","text":""},{"location":"modules/scenario/#scenario-objects","title":"Scenario Objects","text":"Python<pre><code>@dataclass\nclass Scenario()\n</code></pre> <p>Class object that contains all TCO parameters and performance target (range, grade, accel) information for a vehicle such that performance and TCO can be computed during optimization.</p> <p></p>"},{"location":"modules/scenario/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the Scenario class.</p> <p></p>"},{"location":"modules/scenario/#from_file","title":"from_file","text":"Python<pre><code>@classmethod\ndef from_file(\n    cls,\n    selection: int,\n    scenario_file: Union[str, Path] = gl.RESOURCES_FOLDERPATH / \"inputs\" /\n    \"Demo_FY22_scenario_assumptions.csv\"\n) -&gt; Self\n</code></pre> <p>Creates a Scenario instance from a CSV file.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index to filter the scenario data.</li> <li><code>scenario_file</code> Union[str, Path] - Path to the scenario CSV file.</li> </ul> <p>Returns:</p> <ul> <li><code>Scenario</code> - An instance of the Scenario class.</li> </ul> <p></p>"},{"location":"modules/scenario/#override_from_config","title":"override_from_config","text":"Python<pre><code>def override_from_config(config: Config = None, verbose: bool = False) -&gt; Self\n</code></pre> <p>Overrides certain scenario fields if use_config is True and config object is not None.</p> <p>Arguments:</p> <ul> <li><code>config</code> Config, optional - Config object containing configuration data. Defaults to None.</li> <li><code>verbose</code> bool, optional - If True, prints the overridden fields. Defaults to False.</li> </ul> <p>Raises:</p> <ul> <li><code>Exception</code> - If config file is not attached or scenario.use_config is set to False.</li> </ul> <p></p>"},{"location":"modules/scenario/#get_discounted_value","title":"get_discounted_value","text":"Python<pre><code>def get_discounted_value(value: float, year_number: int) -&gt; float\n</code></pre> <p>Calculates the discounted value for a given year.</p> <p>Arguments:</p> <ul> <li><code>value</code> float - The value to be discounted.</li> <li><code>year_number</code> int - The year number for discounting.</li> </ul> <p>Returns:</p> <ul> <li><code>float</code> - The discounted value.</li> </ul> <p></p>"},{"location":"modules/scenario/#delete_dataframes","title":"delete_dataframes","text":"Python<pre><code>def delete_dataframes() -&gt; None\n</code></pre> <p>Deletes DataFrame attributes from the Scenario instance.</p>"},{"location":"modules/sweep/","title":"Table of Contents","text":"<ul> <li>t3co.cli.sweep</li> <li>load_vehicle_scenario_energy</li> <li>generate_ledger</li> <li>create_results_filepath</li> <li>export_results_to_csv</li> <li>run_t3co</li> </ul>"},{"location":"modules/sweep/#t3coclisweep","title":"t3co.cli.sweep","text":""},{"location":"modules/sweep/#load_vehicle_scenario_energy","title":"load_vehicle_scenario_energy","text":"Python<pre><code>def load_vehicle_scenario_energy(\n        selection: Union[int, str],\n        config: Config,\n        vehicle: Vehicle = None,\n        scenario: Scenario = None,\n        energy: Energy = None) -&gt; Tuple[Vehicle, Scenario, Energy]\n</code></pre> <p>Loads the vehicle, scenario, and energy models based on the selection and config.</p> <p>Arguments:</p> <ul> <li><code>selection</code> Union[int, str] - The selection index or string.</li> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <p>Tuple[Vehicle, Scenario, Energy]: The vehicle, scenario, and energy models.</p> <p></p>"},{"location":"modules/sweep/#generate_ledger","title":"generate_ledger","text":"Python<pre><code>def generate_ledger(selection: int, config: Config) -&gt; Dict\n</code></pre> <p>Generates the ledger for the given selection and config.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index.</li> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <ul> <li><code>Dict</code> - The ledger as a dictionary.</li> </ul> <p></p>"},{"location":"modules/sweep/#create_results_filepath","title":"create_results_filepath","text":"Python<pre><code>def create_results_filepath(config: Config) -&gt; Path\n</code></pre> <p>Creates the results file path based on the config.</p> <p>Arguments:</p> <ul> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <ul> <li><code>Path</code> - The path to the results file.</li> </ul> <p></p>"},{"location":"modules/sweep/#export_results_to_csv","title":"export_results_to_csv","text":"Python<pre><code>def export_results_to_csv(\n    reports_list: List[Dict],\n    config: Config,\n    output_path: Union[str, Path] = None,\n    return_filepath: bool = True,\n    return_df: bool = False,\n    sort_values: bool = False\n) -&gt; Tuple[Union[Path, None], Union[pd.DataFrame, None]]\n</code></pre> <p>Exports the results to a CSV file.</p> <p>Arguments:</p> <ul> <li><code>reports_list</code> List[Dict] - The list of reports.</li> <li><code>config</code> Config - The configuration instance.</li> <li><code>output_path</code> Union[str, Path], optional - The output path for the CSV file. Defaults to None.</li> <li><code>return_filepath</code> bool, optional - Whether to return the file path. Defaults to True.</li> <li><code>return_df</code> bool, optional - Whether to return the DataFrame. Defaults to False.</li> <li><code>sort_values</code> bool, optional - Whether to sort the values by selection. Defaults to False.</li> </ul> <p>Returns:</p> <p>Tuple[Union[Path, None], Union[pd.DataFrame, None]]: The output path and DataFrame if specified.</p> <p></p>"},{"location":"modules/sweep/#run_t3co","title":"run_t3co","text":"Python<pre><code>def run_t3co(config: Config, save_results: bool = True) -&gt; None\n</code></pre> <p>Runs the T3CO analysis.</p> <p>Arguments:</p> <ul> <li><code>config</code> Config - The configuration instance.</li> <li><code>save_results</code> bool, optional - Whether to save the results. Defaults to True.</li> </ul>"},{"location":"modules/tcocalc/","title":"Table of Contents","text":"<ul> <li>t3co/tco/tcocalc</li> <li>TCOCalc<ul> <li>__new__</li> <li>__init__</li> <li>calculate_capital_costs</li> <li>calculate_opportunity_costs</li> <li>calculate_operating_costs</li> <li>set_total_cost</li> <li>set_disc_total_cost</li> <li>__str__</li> </ul> </li> </ul>"},{"location":"modules/tcocalc/#t3cotcotcocalc","title":"t3co/tco/tcocalc","text":""},{"location":"modules/tcocalc/#tcocalc-objects","title":"TCOCalc Objects","text":"Python<pre><code>class TCOCalc()\n</code></pre>"},{"location":"modules/tcocalc/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the TCOCalc class.</p> <p></p>"},{"location":"modules/tcocalc/#__init__","title":"__init__","text":"Python<pre><code>def __init__(year_index: int,\n             vehicle: Vehicle,\n             scenario: Scenario,\n             energy: Energy,\n             payload_cap_cost_multiplier: float = None,\n             cap_costs: CapitalCosts = None)\n</code></pre> <p>Initializes the TCOCalc instance.</p> <p>Arguments:</p> <ul> <li><code>year_index</code> int - The year index.</li> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy - The energy instance.</li> <li><code>payload_cap_cost_multiplier</code> float, optional - Payload capacity cost multiplier. Defaults to None.</li> <li><code>cap_costs</code> CapitalCosts, optional - Capital costs instance. Defaults to None.</li> </ul> <p></p>"},{"location":"modules/tcocalc/#calculate_capital_costs","title":"calculate_capital_costs","text":"Python<pre><code>def calculate_capital_costs(vehicle: Vehicle, scenario: Scenario) -&gt; None\n</code></pre> <p>Calculates the capital costs.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> </ul> <p></p>"},{"location":"modules/tcocalc/#calculate_opportunity_costs","title":"calculate_opportunity_costs","text":"Python<pre><code>def calculate_opportunity_costs(vehicle: Vehicle, scenario: Scenario,\n                                energy: Energy) -&gt; None\n</code></pre> <p>Calculates the opportunity costs.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy - The energy instance.</li> </ul> <p></p>"},{"location":"modules/tcocalc/#calculate_operating_costs","title":"calculate_operating_costs","text":"Python<pre><code>def calculate_operating_costs(vehicle: Vehicle, scenario: Scenario,\n                              energy: Energy) -&gt; None\n</code></pre> <p>Calculates the operating costs.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>energy</code> Energy - The energy instance.</li> </ul> <p></p>"},{"location":"modules/tcocalc/#set_total_cost","title":"set_total_cost","text":"Python<pre><code>def set_total_cost(scenario: Scenario) -&gt; None\n</code></pre> <p>Sets the total cost for the year.</p> <p>Arguments:</p> <ul> <li><code>scenario</code> Scenario - The scenario instance.</li> </ul> <p></p>"},{"location":"modules/tcocalc/#set_disc_total_cost","title":"set_disc_total_cost","text":"Python<pre><code>def set_disc_total_cost(vehicle: Vehicle,\n                        scenario: Scenario,\n                        payload_cap_cost_multiplier: float = None,\n                        TCO_switch=\"DIRECT\") -&gt; None\n</code></pre> <p>Sets the discounted total cost for the year.</p> <p>Arguments:</p> <ul> <li><code>vehicle</code> Vehicle - The vehicle instance.</li> <li><code>scenario</code> Scenario - The scenario instance.</li> <li><code>payload_cap_cost_multiplier</code> float, optional - Payload capacity cost multiplier. Defaults to None.</li> <li><code>TCO_switch</code> str, optional - TCO calculation method. Defaults to \"DIRECT\".</li> </ul> <p></p>"},{"location":"modules/tcocalc/#__str__","title":"__str__","text":"Python<pre><code>def __str__() -&gt; str\n</code></pre> <p>Returns a string representation of the TCOCalc instance.</p> <p>Returns:</p> <ul> <li><code>str</code> - String representation of the TCOCalc instance.</li> </ul>"},{"location":"modules/vehicle/","title":"Table of Contents","text":"<ul> <li>t3co/input_data/vehicle</li> <li>Vehicle<ul> <li>__new__</li> <li>from_config</li> <li>from_db</li> <li>set_veh_kg</li> <li>delete_dataframes</li> </ul> </li> </ul>"},{"location":"modules/vehicle/#t3coinput_datavehicle","title":"t3co/input_data/vehicle","text":""},{"location":"modules/vehicle/#vehicle-objects","title":"Vehicle Objects","text":"Python<pre><code>@dataclass\nclass Vehicle()\n</code></pre>"},{"location":"modules/vehicle/#__new__","title":"__new__","text":"Python<pre><code>def __new__(cls, *args, **kwargs)\n</code></pre> <p>Creates a new instance of the OpportunityCosts class.</p> <p></p>"},{"location":"modules/vehicle/#from_config","title":"from_config","text":"Python<pre><code>@classmethod\ndef from_config(cls, selection: int, config: Config) -&gt; Self\n</code></pre> <p>Creates a Vehicle instance from the configuration.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index.</li> <li><code>config</code> Config - The configuration instance.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - An instance of the Vehicle class.</li> </ul> <p></p>"},{"location":"modules/vehicle/#from_db","title":"from_db","text":"Python<pre><code>@classmethod\ndef from_db(cls, selection: int, vehicle_db_file: Union[str, Path]) -&gt; Self\n</code></pre> <p>Creates a Vehicle instance from the vehicle database file.</p> <p>Arguments:</p> <ul> <li><code>selection</code> int - The selection index.</li> <li><code>vehicle_db_file</code> Union[str, Path] - The vehicle database file path.</li> </ul> <p>Returns:</p> <ul> <li><code>Self</code> - An instance of the Vehicle class.</li> </ul> <p></p>"},{"location":"modules/vehicle/#set_veh_kg","title":"set_veh_kg","text":"Python<pre><code>def set_veh_kg() -&gt; None\n</code></pre> <p>Sets the vehicle weight in kilograms.</p> <p></p>"},{"location":"modules/vehicle/#delete_dataframes","title":"delete_dataframes","text":"Python<pre><code>def delete_dataframes() -&gt; None\n</code></pre> <p>Deletes DataFrame attributes from the Vehicle instance.</p>"},{"location":"pages/config_inputs_descriptions/","title":"Config Input Parameters","text":"Filter Options: Units: All Data Type: All Download Config Template Config\u00a0Input Parameter Full Form Units Description Data Type analysis_id Analysis Index Index for managing T3CO analyses   or runs int analysis_name Analysis Name Name of T3CO Analysis for user's   reference string vehicle_file Vehicle Filepath Filepath to vehicle input file   either absolute or relative to /resources/ folder string scenario_file Scenario Filepath Filepath to scenario input file   either absolute or relative to /resources/ folder string dst_dir Destination Directory Filepath to results destination   directory either absolute or relative to /resources/ folder string selections Selections List List of selections from   vehicle/scenario files to include in the analysis. Takes input as an integer   or list of integers. '-1' makes T3CO run all vehicles in the vehicle file int/list vehicle_life_yr Vehicle Life yr Override number of TCO years for   all selections.. If left blank, T3CO uses selection specific vehicle_life_yr   from scenario file int ess_max_charging_power_kw ESS Max Charging Power Override kW Override ESS max charging power   for all selections. If left blank, T3CO uses selection specific   ess_max_charging_power_kw from scenario file float fs_fueling_rate_kg_per_min Fuel Storage Gaseous Fueling Rate kg/min Override gaseous fueling fill   rate for all selections. If left blank, T3CO uses selection specific   fs_fueling_rate_kg_per_min from scenario file float fs_fueling_rate_gasoline_gpm Fuel Storage Gasoline Fueling Rate gal/min Override gasoline liquid fueling   fill rate for all selections. If left blank, T3CO uses selection specific   fs_fueling_rate_gasoline_gpm from scenario file float fs_fueling_rate_diesel_gpm Fuel Storage Diesel Fueling Rate gal/min Override diesel liquid fueling   fill rate for all selections. If left blank, T3CO uses selection specific   fs_fueling_rate_diesel_gpm from scenario file float algorithms Optimization Algorithms Algorithm for pymoo   optimization. Select from    [\"NSGA2\", \"PatternSearch\"] string lw_imp_curves Lightweighting Improvement Curves Filepath Filepath to lightweighting   improvement cost curve either absolute or relative to /resources/ folder string eng_eff_imp_curves Engine Efficiency Improvement Curves Filepath Filepath to engine efficiency   improvement cost curve either absolute or relative to /resources/ folder string aero_drag_imp_curves Aero Drag Coefficient Improvement   Curves Filepath Filepath to aerodynamic drag   coefficient improvement cost curve either absolute or relative to /resources/   folder string lw_imp_curve_sel Lightweighting Improvement Curve   Selection Override Override selection of light   weighting improvement curve from lw_imp_curves file for all selections string eng_eff_imp_curve_sel Engine Efficiency Improvement Curve   Selection Override Override selection of engine   efficiency improvement curve from eng_eff_imp_curves file for all selections string aero_drag_imp_curve_sel Aero Drag Coefficient Improvement   Curve Selection Override Override selection of   aerodynamic drag improvement curve from aero_drag_imp_curves file for all   selections string skip_all_opt Skip All Optimization Boolean switch to override skip   optimization for all selections bool constraint_range Optimization Constraint: Range Override boolean switch for   optimization range constraint for all selections - if left blank, T3CO uses   selection specific switch bool constraint_accel Optimization Constraint: Acceleration Test Override boolean switch for   optimization acceleration constraint for all selections- if left blank, T3CO   uses selection specific switch bool constraint_grade Optimization Constraint: Gradeability Test Override boolean switch for   optimization gradeability constraint for all selections- if left blank, T3CO   uses selection specific switch bool objective_tco Optimization Objective: Total Cost of Ownership Override boolean switch for   optimization objective as TCO for all selections- if left blank, T3CO uses   selection specific switch bool constraint_c_rate Optimization Constraint: Charge Rate Override boolean switch for   optimization charge rate constraint for all selections- if left blank, T3CO   uses selection specific switch bool constraint_trace_miss_dist_percent_on Optimization Constraint: Distance Trace Miss Override boolean switch for   optimization distance trace miss percentage for all selections- if left   blank, T3CO uses selection specific switch bool activate_tco_payload_cap_cost_multiplier Override Switch to Calculate Payload   Capacity Cost Multiplier Override boolean switch for lost   payload capacity opportunity cost calculations- if left blank, T3CO uses   selection specific switch bool activate_tco_fueling_dwell_time_cost Override Switch to Calculate   Fueling/Charging Dwell Time Override boolean switch for   fueling dwell time opportunity cost calculations- if left blank, T3CO uses   selection specific switch bool fdt_frac_full_charge_bounds Fueling Dwell Time: Fractional   Charge SOC Bounds Override Override fraction of lower and   upper bounds for fractional charge- if left blank, T3CO uses selection   specific switch list activate_mr_downtime_cost Override Switch to Calculate   Maintenance &amp; Repair Downtime Override boolean switch for   maintenance and repair downtime opportunity cost calculations- if left blank,   T3CO uses selection specific switch bool"},{"location":"pages/ledger_outputs_descriptions/","title":"Ledger Output Parameters","text":"<p>Filter Options: - Category: All - Units: All - Data Type: All</p> Ledger Output Parameters Category Full Form Units Description Data Type(s) selection Scenario Selection Number Selection number of vehicle/scenario Union[int, str] scenario_name Scenario Scenario Name Name of the selected scenario/vehicle str model_year Scenario Vehicle Model Year Current year or Vehicle Model Year int vehicle_life_yr Analysis Vehicle Life yr Number of years to calculate TCO for - generally the expected life of the   vehicle in years int tco_method Analysis TCO Calculation Method Choose TCO Calculation method between 'DIRECT' and 'EFFICIENCY'. 'DIRECT'   method uses scenario.downtime_oppy_cost_dol_per_hr to estimate downtime   opportunity costs while 'EFFICIENCY' method uses a time-based efficiency   value to implicitly include downtime opportunity costs in the   discounted_tco_dol. Defaults to 'DIRECT' if left blank. str tco_per_year TCOCalc TCO Calculations Per Year List of dictionary of TCOCalc objects for each year of calculations.   TCOCalc objects contain yearly total costs, and cost components for   CapitalCosts, OperatingCosts, and OpportunityCosts list[TCOCalc] discounted_total_cap_cost_dol CapitalCosts Discounted Total Capital Cost $ Discounted Total Capital Costs - Contains MSRP and Tax or Purchasing   Downpayment. It is discounted for zero years, effectively not discounted due   to the cost occuring during the start of lifecycle. float discounted_total_oper_cost_dol OperatingCosts Discounted Total Operating Costs $ Discounted Total Operating Costs in dollars - Sum of discounted values of   fuel expense, maintenance, insurance, purchasing, and fueling dwell labor float discounted_downtime_oppy_cost_dol OpportunityCosts Discounted Total Opportunity Cost $ Discounted Total Opportunity Costs in dollars- sum of discounted values   of lost payload capacity cost, fueling dwell opportunity cost, and   maintenance &amp; repair downtime opportunity cost float discounted_tco_dol TCO Discounted Total Cost of Ownership $ Discounted total cost of ownership in dollars - calculated based on   config.tco_method. For DIRECT method, it is the sum of discounted capital   costs, operating costs, and opportunity costs per year. For EFFICIENCY   method, it is estimated by taking productivity or value of downtime instead   of adding downtime opportunity costs float cumu_disc_tco_dol_per_yr TCO Cumulative Discounted Total Cost of Ownership $ Cumulative sum of discounted TCO per year in dollars presented as a   vector of length=vehicle_life_yr list[float] cumu_tco_dol_per_mi TCO Cumulative Total Cost of Ownership Per Mile $ Cumulative discounted TCO in dollars divided by cumulative vmt presented   as a vector of length=vehicle_life_yr list[float] cumu_levelized_tco_dol_per_mi TCO Cumulative Levelized Total Cost of Ownership Per Mile $ Cumulative discounted TCO in dollars divided by cumulative discounted VMT   presented as a vector of length=vehicle_life_yr list[float] total_vmt Scenario Total Vehicle Miles Traveled mi Sum of Vehicle Miles Traveled (scenario.vmt) for all years in   vehicle_life_yr float disc_total_vmt Scenario Discounted Total Vehicle Miles Traveled mi Sum of scenario.vmt discounted at the rate of   scenario.discount_rate_pct_per_yr float glider_cost_dol CapitalCosts Glider Cost $ Estimated glider component cost in dollars - contributes to MSRP float fuel_converter_cost_dol CapitalCosts Fuel Converter Cost $ Estimated fuel converter component cost in dollars - contributes to MSRP float fuel_storage_cost_dol CapitalCosts Fuel Storage Cost $ Estimated fuel storage component cost in dollars - contributes to MSRP float motor_control_power_elecs_cost_dol CapitalCosts Motor Controller &amp; Power Electronics Cost $ Estimated motor and power electronics component cost in dollars -   contributes to MSRP float plug_cost_dol CapitalCosts Plugin Charger Cost $ Estimated plugin charger component cost in dollars - contributes to MSRP float battery_cost_dol CapitalCosts Battery Cost $ Estimated battery/ESS component cost in dollars - contributes to MSRP float purchase_tax_dol CapitalCosts Purchase Tax $ Estimated purchased/excise tax  in   dollars - calculated from MSRP float msrp_total_dol CapitalCosts Manufacturer's Suggester Retail Price $ Estimated manufacturer's suggested retail price in dollars - calculated   from vehicle component costs float purchasing_downpayment_dol CapitalCosts Purchasing Downpayment Cost $ Estimated purchasing downpayment in dollars. For loan or lease, it is   calculated from scenario.purchasing_downpayment_pct and   mrsp_total_dol+purchase_tax. For cash method, it is equal to   mrsp_total_dol+purchase_tax float residual_cost_dol CapitalCosts Residual Cost $ Estimated residual cost of vehicle in dollars (residual value is the   negative of residual cost) float total_fuel_cost_dol OperatingCosts Total Fuel Operating Cost $ Estimated fuel operating cost in dollars - calculated from energy   consumption and fuel prices float total_maintenance_cost_dol OperatingCosts Total Maintenance Operating Cost $ Estimated maintenance operating cost in dollars - calculated from VMT and   scenario.maint_oper_cost_dol_per_mi float total_purchasing_cost_dol OperatingCosts Total Purchasing Operating Cost $ Estimated purchasing cost - additional payments due to interest or rent   fee for loan and lease methods respectively float insurance_cost_dol OperatingCosts Insurance Cost $ Estimated insurance cost of vehicle in dollars - estimated from MSRP and   scenario.insurance_rates_pct_per_yr float fueling_dwell_labor_cost_dol OperatingCosts Fueling/Charging Dwell Labor Cost $ Estimated labor cost incurred during fueling/charging dwell time float payload_capacity_cost_dol OpportunityCosts Lost Payload Capacity Opportunity Cost $ Lost payload capacity opportunity cost in dollars - estimated from   payload_cap_cost_multiplier and estimated tco float fueling_downtime_oppy_cost_dol OpportunityCosts Fueling/Charging Dwell Opportunity Cost $ Estimated opportunity cost associated with fueling/charging dwell time float mr_downtime_oppy_cost_dol OpportunityCosts Maintenance Downtime Opportunity Cost $ Estimated labor cost incurred during maintenance &amp; repair downtime float discounted_downtime_oppy_cost_dol OpportunityCosts Discounted Total Downtime Opportunity Cost $ Estimated discounted opportunity cost for both fueling dwell time and   M&amp;R downtime in dollars - estimation is based on config.TCO_method float total_fuel_used_gal_ge Energy Total Fuel Used Gallon Gasoline Equivalent GGE Estimated total fuel used in gallons gasoline equivalent - estimated from   energy efficiency and distance traveled float total_fuel_used_gal_de Energy Total Fuel Used Gallon Diesel Equivalent DGE Estimated total fuel used in diesels gasoline equivalent - estimated from   energy efficiency and distance traveled float mpgge Energy Miles Per Gallon Gasoline Equivalent mi/GGE Miles per Gallon of Gasoline Equivalent - from drivecycle simulation float grid_mpgge Energy Grid Impact Fuel Economy mi/GGE Miles per Gallon of Gasoline Equivalent effect to grid - mpgge times   charger efficiency float mpgde Energy Miles Per Gallon Diesel Equivalent mi/DGE Miles per Gallon of Diesel Equivalent - from drivecycle simulation float kwh_per_mi Energy Energy Per Distance km/mi Energy spent per mile of operation - estimated from drivecycle simulation float payload_cap_cost_multiplier OpportunityCosts Lost Payload Capacity   Multiplier Lost payload capacity opportunity cost factor - represents the   fractionally extra vehicle required to compensate for reduced payload   capacity compared to conventional vehicle - Currently only for Class 8   vehicles float total_fueling_dwell_time_hr OpportunityCosts Fueling/Charging Dwell Time hr Total dwell time of vehicle due to fueling/charging - used to   estimate downtime opportunity cost float total_mr_downtime_hr OpportunityCosts Maintenance Downtime hr Total dwell time of vehicle due to maintenance &amp; repair   (planned, unplanned, and tire replacement) - used to estimate downtime   opportunity cost float total_downtime_hr OpportunityCosts Total Downtime hr Total downtime due to fueling/charging and maintenance events float"},{"location":"pages/scenario_inputs_descriptions/","title":"Scenario Input Descriptions","text":"<p>Filter Options: - Units: All - Powertrain: All Conv BEV HEV FCEV - Data Type: All</p> T3CO Component:   General TCO CapitalCosts OperatingCosts OpportunityCosts Optimization Download Scenario Template Scenario Input Parameter Full Form Units Description Powertrains T3CO Component data_type aero_drag_imp_curve_sel Aerodynamic Drag Coefficient Improvement Curve Selection Complete file path to aero drag improvement curve - cost vs drag coefficient Conv, BEV, HEV, FCEV Optimization string avg_speed_mph Average Trip Speed MPH Average Speed of Vehicle during the drivecycle Conv, BEV, HEV, FCEV TCO - Efficiency float constant_trip_distance_mi Trip Distance for each Shift Distance covered during drivecycle Conv, BEV, HEV, FCEV OpportunityCosts: Payload float constraint_accel Optimization Constraint: Select Acceleration Test Optimization constraint - Acceleration 0-30mph, Acceleration 0-60mph Conv, BEV, HEV, FCEV Optimization bool constraint_c_rate Optimization Constraint: Select ESS Charge Rate Optimization constraint - Charge Rate Conv, BEV, HEV, FCEV Optimization bool constraint_grade Optimization Constraint: Select Gradeability Test Optimization constraint - Gradeability 1.25% grade and 6% grade Conv, BEV, HEV, FCEV Optimization bool constraint_range Optimization Constraint: Select Range Optimization constraint - Range BEV, HEV, FCEV Optimization bool constraint_trace_miss_dist_percent_on Optimization Constraint: Select Distance Trace Miss Optimization Constraint: Select Distance Trace Miss Conv, BEV, HEV, FCEV Optimization bool depreciation_rates_pct_per_yr Depreciation Rates per Year %/yr Depreciation rates per year as a vector. Used in calculating residual values year over year Conv, BEV, HEV, FCEV CapitalCosts:Residual, OperatingCosts: Purchasing list[float] discount_rate_pct_per_yr Discount Rate %/yr Discount rate per year as a fraction/year to account for time value of money and alternative investment opportunities. This is applied as a constant rate for TCO cost components Conv, BEV, HEV, FCEV OperatingCosts, OpportunityCosts float downtime_oppy_cost_dol_per_hr Downtime Opporunity Cost Rate $/hr Opportunity cost of dwell time for fueling vehicle as dollar per hour Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell, Maintenance Downtime float drive_cycle Drive Cycles Relative filepath of drivecycle input file(s)  from /t3co/resources/cycles/ folder - accepts single drivecyle path, composite cycles (for example: '[(\"EPA_Ph2_rural_interstate_65mph.csv\", .86), (\"EPA_Ph2_urban_highway_55mph.csv\", .09), (\"EPA_Ph2_transient.csv\", .05)]'), or path to folder containing multiple drivecycles (results in corresponding number of scenarios) Conv, BEV, HEV, FCEV RunFASTSim string eng_eff_imp_curve_sel Engine Efficiency Improvement Curve Selection Complete file path to engine efficiency improvement curve - cost vs efficiency Conv, BEV, HEV, FCEV Optimization string ess_base_cost_dol ESS Base Cost kW Cost of ESSs packaging in dollars that is added to vehicle.ess_max_kwh * scenario.ess_cost_dol_per_kwh to estimate total ESS cost BEV, HEV, FCEV CapitalCosts: MSRP float ess_cost_dol_per_kwh ESS Cost Per Capacity $/kWh Cost of ESS in dollars per kWh of capacity BEV, HEV, FCEV CapitalCosts: MSRP float ess_max_charging_power_kw ESS Max Charging Power kW Maximum charging power available in kW (infrastructure dependent) for ESS (Energy Storage Systems like Li-ion battery packs) in xEVs BEV, HEV, FCEV OpportunityCosts: Fueling Dwell float fc_cng_ice_cost_dol_per_kw Fuel Converter CNG Engine Cost Rate $/kW Cost of CNG engine per kW of max power Conv, HEV, FCEV CapitalCosts: MSRP float fc_fuelcell_cost_dol_per_kw Fuel Converter Fuel Cell Cost Rate $/kW Cost of Hydrogen fuel cells per kW of power for FCEVs Conv, HEV, FCEV CapitalCosts: MSRP float fc_ice_base_cost_dol Fuel Converter IC Engine Base Cost $ Cost of Fuel Convertor baseline that is added to vehicle.fc_max_kw \\* scenario.fc_ice_cost_dol_per_kw to estimate total FC cost baseline that is added to vehicle.fc_max_kw \\* scenario.fc_ice_cost_dol_per_kw to estimate total FC cost\" Conv, HEV, FCEV CapitalCosts: MSRP float fc_ice_cost_dol_per_kw Fuel Converter IC Engine Cost Rate $/kW Cost of Internal Combustion Engine per kW of power for Conventional vehicles Conv, HEV, FCEV CapitalCosts: MSRP float fdt_available_freetime_hr Fueling Dwell Time: Available Freetime for Operator Per Dwell hr Number of hours of dwell time that do not incur opportunity cost penalty (eg., charging vehicle during scheduled lunch stops) Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell float fdt_avg_overhead_hr_per_dwell_hr Fueling Dwell Time: Overhead Time for Fueling/Charging per dwell hour hr/hr Number of hours of overhead time during fueling/charging (eg., detour to gas station, time taken for plugging in charger, etc.) Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell float fdt_dwpt_fraction_power_pct Fueling Dwell Time: Fraction of Power Charging Onroad % Fraction of vehicle power consumption through dynamic wireless power transfer Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell float fdt_frac_full_charge_bounds Fueling Dwell Time: Partial Charging SOC Bounds (%,%) Lower and Upper bounds for fractional charge as a list [&lt;lower&gt;, &lt;upper&gt;]. &lt;lower&gt; is lowest fraction of charge/tank for a fractional charge at a fueling stop. &lt;upper&gt; is the highest fraction of charge/tank capacity above which it is preferred to rather fill up the batter/tank Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell list\\[float\\] fdt_num_free_dwell_trips Fueling Dwell Time: Number of Free Dwell Trips per Day Number of free trips or overnight charging opportunities that do not incur an opportunity cost penalty Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell float fs_cng_cost_dol_per_kwh Fuel Storage CNG Cost Rate $/kW Cost of CNG fuel storage per kWh of max fuel tank capacity Conv CapitalCosts: MSRP float fs_cost_dol_per_kwh Fuel Storage Liquid Fueling Rate gal/min Cost of liquid fuel storage tanks per kWh of capacity for liquid fuel like diesel/gasoline Conv, HEV, FCEV CapitalCosts: MSRP float fs_fueling_rate_diesel_gpm Fuel Storage Cost Rate $/kWh Fill rate in gallons per min (GPM) for diesel - infrastructure dependent Conv, HEV OpportunityCosts: Fueling Dwell float fs_fueling_rate_gasoline_gpm Fuel Storage Liquid Fueling Rate gal/min Fill rate in gallons per min (GPM) for gasoline - infrastructure dependent Conv, HEV OpportunityCosts: Fueling Dwell float fs_fueling_rate_kg_per_min Fuel Storage Gaseous Fueling Rate kg/min Fill rate in kg per min (KPM) for gaseous fuels like hydrogen, propane - infrastructure dependent FCEV OpportunityCosts: Fueling Dwell float fs_h2_cost_dol_per_kwh Fuel Storage Hydrogen Cost Rate $/kWh Cost of gas fuel storage tanks per kWh of capacity for gaseous fuel like hydrogen FCEV CapitalCosts: MSRP float fuel_prices_file Fuel Prices Filepath Filepath of FuelPrices.csv either as an absolute path or relative to the resources folder path Conv, BEV, HEV, FCEV OperatingCosts: Fuel string fuel_type Fuel Type Fuel name - should be one of : ['diesel', 'gasoline', 'hydrogen', 'electricity', 'cng']. For hybrids, use the primary fuel Conv, BEV, HEV, FCEV General string gvwr_credit_kg Gross Vehicle Weight Rating Credit kg Additional allowable weight in kg for advanced vehicles (eg. 2000lb credit for Class 8 BEVs) Conv, BEV, HEV, FCEV OpportunityCosts: Payload float gvwr_kg Gross Vehicle Weight Rating Limit kg Gross Vehicle Weight Rating upper limit  in kg for the vehicle's weight class Conv, BEV, HEV, FCEV OpportunityCosts: Payload float insurance_rates_pct_per_yr Insurance Rates per Year %/yr Insurance rates as a percent of MSRP per year as vector with length equal to number of TCO years Conv, BEV, HEV, FCEV OperatingCosts: Insurance list[float] knob_max_ess_kwh Optimization Bounds: Max ESS capacity kWh Optimization bounds - maximum ESS capacity in kWh BEV, HEV, FCEV Optimization float knob_max_fc_kw Optimization Bounds: Max Fuel Convertor Peak Power kW Optimization bounds - maximum fuel convertor peak power in kW Conv, HEV, FCEV Optimization float knob_max_fs_kwh Optimization Bounds: Max Fuel Storage Capacity kWh Optimization bounds - maximum fuel storage capacity in kWh Conv, HEV, FCEV Optimization float knob_max_motor_kw Optimization Bounds: Max Motor Power kW Optimization bounds - maximum motor peak power in kW BEV, HEV, FCEV Optimization float knob_min_ess_kwh Optimization Bounds: Min ESS capacity kWh Optimization bounds - minimum ESS capacity in kWh BEV, HEV, FCEV Optimization float knob_min_fc_kw Optimization Bounds: Min Fuel Convertor Peak Power kW Optimization bounds - minimum fuel convertor peak power in kW Conv, HEV, FCEV Optimization float knob_min_fs_kwh Optimization Bounds: Min Fuel Storage Capacity kWh Optimization bounds - minimum fuel storage capacity in kWh Conv, HEV, FCEV Optimization float knob_min_motor_kw Optimization Bounds: Min Motor Power kW Optimization bounds - minimum motor peak power in kW BEV, HEV, FCEV Optimization float labor_rate_dol_per_hr Labor Rate $/hr Labor Rate for dollars per hour of vehicle operation Conv, BEV, HEV, FCEV OperatingCosts: Fueling Dwell Labor float lw_imp_curve_sel Light Weighting Improvement Curve Selection Complete file path to light weighting improvement curve - cost vs weight reduced Conv, BEV, HEV, FCEV Optimization string maint_oper_cost_dol_per_mi Maintenance Operating Cost Per Distance $/mi Vehicle maintenance operating cost in dollars per mile traveled as vector of length equal to number of TCO years Conv, BEV, HEV, FCEV OperatingCosts: Maintenance list\\[float\\] markup_pct Mark-up Percentage % Markup on price of vehicle as percentage of MSRP (eg., 1.20 means 20% markup_pct on MSRP) Conv, BEV, HEV, FCEV CapitalCosts: MSRP float max_time_0_to_30mph_at_gvwr_s Acceleration Test: Max Time for 0-30MPH Fully Laden s Maximum time taken by optimized vehicle (at GVWR weight limit) to accelerate from 0 to 30 mph - acceleration test Conv, BEV, HEV, FCEV Optimization float max_time_0_to_60mph_at_gvwr_s Acceleration Test: Max Time for 0-60MPH Fully Laden s Maximum time taken by optimized vehicle (at GVWR weight limit) to accelerate from 0 to 60 mph - acceleration test Conv, BEV, HEV, FCEV Optimization float min_speed_at_1p25pct_grade_in_5min_mph Gradeability Test: Min Speed Achieved at 1.25=% grade in 5 mins MPH Minimum speed in miles/hour for the optimized vehicle to attain from 0 mph in 5 mins for a 1.25 percent gradeability test Conv, BEV, HEV, FCEV Optimization float min_speed_at_6pct_grade_in_5min_mph Gradeability Test: Min Speed Achieved at 6% grade in 5 mins MPH Minimum speed in miles/hour for the optimized vehicle to attain from 0 mph in 5 mins for a 6 percent gradeability test Conv, BEV, HEV, FCEV Optimization float model_year Vehicle Model Year Vehicle model year Conv, BEV, HEV, FCEV General int mpgge Miles Per Gallon Gasoline Equivalent mi/GGE Miles Per Gallon Gasoline Equivalent given as an exogenous input to Energy if desired, and is directly used in OperatingCosts calculations. Should be provided along with primary_fuel_range_mi. If left blank, FASTSim or other powertrain simulation runs within T3CO to estimate this value. Conv, BEV, HEV, FCEV OperatingCosts: Fuel float mr_avg_tire_life_mi Maintenance &amp; Repair Downtime: Average Tire Life mi Average life of tire in miles after which a tire replacement event takes place Conv, BEV, HEV, FCEV OpportunityCosts: Maintenance Downtime float mr_planned_downtime_hr_per_yr Maintenance &amp; Repair Downtime: Planned Downtime per Year hr/yr Regular/planned maintenance time in hours per year Conv, BEV, HEV, FCEV OpportunityCosts: Maintenance Downtime float mr_tire_replace_downtime_hr_per_event Maintenance &amp; Repair Downtime: Tire Replacement Downtime per Event hr/event Downtime hours per tire replacement event Conv, BEV, HEV, FCEV OpportunityCosts: Maintenance Downtime float mr_unplanned_downtime_hr_per_mi Maintenance &amp; Repair Downtime: Unplanned Downtime per Distance hr/mi Unplanned maintenance time per mile traveled as a vector with length equal to number of TCO years Conv, BEV, HEV, FCEV OpportunityCosts: Maintenance Downtime list\\[float\\] msrp_total_dol MSRP Intput $ Manufacturer's Suggested Retail Price provided as an input override if required. This bypasses the CapitalCosts MSRP breakdown calculations and hence requires fewer inputs from the Vehicle model Conv, BEV, HEV, FCEV CapitalCosts: MSRP float objective_tco Optimization Objective: Total Cost of Ownership Boolean switch for minimizing TCO as optimization objective Conv, BEV, HEV, FCEV Optimization bool pe_mc_base_cost_dol Power Electronics and Motor Controller Base Cost $ Cost of Power Electronics and Motor Controllers baseline that is added to vehicle.mc_max_kw * scenario.pe_mc_cost_dol_per_kw to estimate total PE&amp;MC cost BEV, HEV, FCEV CapitalCosts: MSRP float pe_mc_cost_dol_per_kw Power Electronics and Motor Controller Cost Rate $/kW Cost of Power Electronics and Motor Controllers in dollars per kW BEV, HEV, FCEV CapitalCosts: MSRP float plf_ref_veh_empty_mass_kg Payload Loss Factor: Reference Vehicle Empty Mass kg Reference vehicle empty weight in kg for lost payload capacity opportunity cost calculation Conv, BEV, HEV, FCEV OpportunityCosts: Payload float plf_weight_distribution_file Payload Loss Factor: Weight Distribution Input Filepath Filepath of Weight Distribution file (tractorweightvars.csv) either as an absolute path or relative to the resources folder path Conv, BEV, HEV, FCEV OpportunityCosts: Payload string plug_base_cost_dol Plugin Charger Base Cost dol Cost of plugin connections on  certain xEVs BEV, HEV, FCEV CapitalCosts: MSRP float primary_fuel_range_mi Primary Range of the Vehicle mi Primary Range of the Vehicle given as an exogenous input to Energy if desired, and is directly used in OperatingCosts and OpportunityCosts calculations.Should be provided along with mpgge. If left blank, FASTSim or other powertrain simulation runs within T3CO to estimate this value. Conv, BEV, HEV, FCEV OperatingCosts: Fuel, OpportunityCosts: Fueling Dwell float purchasing_down_payment_pct Purchasing Down-Payment Percentage % Purchasing downpayment percentage for leasing or loan, represented as a fraction of MSRP+Tax Conv, BEV, HEV, FCEV OperatingCosts: Purchasing float purchasing_interest_apr_pct_per_yr Purchasing Annual Interest Rate/APR %/yr Purchasing: Annual Interest rate or APR for loan/lease method representated as a scalar fraction Conv, BEV, HEV, FCEV OperatingCosts: Purchasing float purchasing_method Purchasing Method Selection Purchasing: Purchasing Method selection, should be one of [\"cash\", \"loan\", \"lease\"] Conv, BEV, HEV, FCEV OperatingCosts: Purchasing string purchasing_payment_frequency_months Purchasing Payment Frequency months Purchasing: Payment frequency in number of months for loan method. Defaults to 1 for lease Conv, BEV, HEV, FCEV OperatingCosts: Purchasing float purchasing_term_yr Purchasing Loan/Lease Term years Purchasing: Purchasing Term in number of years for lease and loan method Conv, BEV, HEV, FCEV OperatingCosts: Purchasing float region Fuel Price Region/Model Region name is used as a key to find the right fuel prices for the analysis. Refer to /t3co/resources/FuelPrices.csv for region name Conv, BEV, HEV, FCEV OperatingCosts: Fuel string scenario_name Scenario Name Name of the vehicle and scenario - Includes names Conv, BEV, HEV, FCEV General string selection Selection Index Name of the vehicle and scenario - Includes names Conv, BEV, HEV, FCEV General string shifts_per_year Number of Shifts per Year  Selection number that is used to match with the corresponding vehicles on the Demo_FY22_vehicle_assumptions.csv file Conv, BEV, HEV, FCEV OpportunityCosts: Fueling Dwell int skip_opt Switch to Skip Optimization Boolean switch for skipping the optimization module Conv, BEV, HEV, FCEV Optimization bool soc_norm_init_for_accel_pct Initial SOC override for Acceleration Test % Initial normalized SOC for acceleration test (only PHEV) BEV, HEV, FCEV Optimization float soc_norm_init_for_grade_pct Initial SOC override for Gradeability Test % Initial normalized SOC for gradeability test (only PHEV) BEV, HEV, FCEV Optimization float target_range_mi Target Vehicle Range mi Target range in miles to be achieved by the optimized vehicle Conv, BEV, HEV, FCEV Optimization float tax_rate_pct Tax Rate % Registration and other taxes during time of purchase as percent on the MSRP (eg., 0.125 means 12.5% of MSRP) Conv, BEV, HEV, FCEV CapitalCosts: Purchase Tax float trace_miss_dist_percent Distance Trace Miss Percentage Threshold % Distance trace miss percentage threshold for optimization Conv, BEV, HEV, FCEV Optimization float use_config Flag to Use Config Overrides Boolean switch for using config file as override for scenario attributes Conv, BEV, HEV, FCEV General bool vehicle_glider_cost_dol Vehicle Glider Cost $ Cost of glider (vehicle without powertrain) in dollars Conv, BEV, HEV, FCEV CapitalCosts: MSRP float vehicle_life_yr Vehicle Life yr Number of years to calculate TCO for - generally the expected life of the vehicle in years Conv, BEV, HEV, FCEV General int vmt Vehicle Miles Traveled per year mi Vehicle Miles Traveled as an array/list with length&gt;=vehicle_life_yr Conv, BEV, HEV, FCEV General list\\[int\\] vocation Vehicle Vocation Type Vocation of the vehicle - only for user reference Conv, BEV, HEV, FCEV General string"},{"location":"pages/vehicle_inputs_descriptions/","title":"Vehicle Input Descriptions","text":"Filter Options: Units: All Powertrain: All Conv BEV HEV FCEV Data Type: All Download Vehicle Template Vehicle Input Parameter Full Form Units Description Powertrain Data Type(s) alt_eff Alternator Efficiency % Alternator efficiency Conv, BEV, HEV, FCEV float aux_kw Auxiliary Load kW Auxiliary load power, $kW$ Conv, BEV, HEV, FCEV float cargo_kg Cargo Mass kg Cargo mass including passengers, $kg$ Conv, BEV, HEV, FCEV float chg_eff Charging Efficiency % Charger efficiency BEV, HEV, FCEV float comp_mass_multiplier Component Mass Multiplier Component mass multiplier for vehicle mass calculation Conv, BEV, HEV, FCEV float drag_coef Aero Drag Coefficient Aerodynamic drag coefficient Conv, BEV, HEV, FCEV float drive_axle_weight_frac Drive Axle Weight Fraction % Fraction of weight on the drive axle while stopped Conv, BEV, HEV, FCEV float ess_base_kg ESS Base Mass kg Traction battery base mass, $kg$ BEV, HEV, FCEV float ess_chg_to_fc_max_eff_perc ESS Charge to Maximize Fuel Converter Efficiency % ESS charge effort toward max FC efficiency BEV, HEV, FCEV float ess_dischg_to_fc_max_eff_perc ESS Discharge to Maximize Fuel Converter Efficiency % ESS discharge effort toward max FC efficiency BEV, HEV, FCEV float ess_kg_per_kwh ESS Mass per Capacity kg/kWh Traction battery mass per energy, $\\frac{kg}{kWh}$ BEV, HEV, FCEV float ess_life_coef_a ESS Life Coeficient A Traction battery cycle life coefficient A, see\u00a0reference BEV, HEV, FCEV float ess_life_coef_b ESS Life Coeficient B Traction battery cycle life coefficient B, see\u00a0reference BEV, HEV, FCEV float ess_max_kw ESS Max Power kW Traction battery maximum power output, $kW$ BEV, HEV, FCEV float ess_max_kwh ESS Max Capacity kWh Traction battery energy capacity, $kWh$ BEV, HEV, FCEV float ess_round_trip_eff ESS Round Trip Efficiency % Traction battery round-trip efficiency BEV, HEV, FCEV float ess_to_fuel_ok_error ESS to Fuel Error Threshold % Maximum acceptable ratio of change in ESS energy to expended fuel energy (used in hybrid SOC balancing), $\\frac{\\Delta E_{ESS}}{\\Delta E_{fuel}}$ BEV, HEV, FCEV float fc_base_kg Fuel Converter Base Mass kg Fuel converter base mass, $kg$ Conv, HEV, FCEV float fc_eff_map Fuel Converter Efficiency Map % Fuel converter efficiency map Conv, HEV, FCEV list [float] fc_eff_type Fuel Converter Efficiency Type Fuel converter efficiency type, one of [SI,\u00a0ATKINSON,\u00a0DIESEL,\u00a0H2FC,\u00a0HD_DIESEL] Used for calculating\u00a0fc_eff_map, and other calculations if H2FC Conv, HEV, FCEV string fc_kw_per_kg Fuel Converter Specific Power kW/kg Fuel converter specific power (power-to-weight ratio), $\\frac{kW}{kg}$ Conv, HEV, FCEV float fc_max_kw Fuel Converter Max Power kW Fuel converter peak continuous power, $kW$ Conv, HEV, FCEV float fc_peak_eff_override Fuel Converter Peak Efficiency Override % Fuel converter efficiency peak override, scales entire curve Conv, HEV, FCEV float fc_pwr_out_perc Fuel Converter Power Output Map % Fuel converter output power percentage map, x values of\u00a0fc_eff_map Conv, HEV, FCEV list [float] fc_sec_to_peak_pwr Fuel Converter Time to Peak Power s Fuel converter time to peak power, $s$ Conv, HEV, FCEV float force_aux_on_fc Force Auxiliary Load from Fuel Converter Force auxiliary power load to come from fuel converter Conv, HEV, FCEV bool frontal_area_m2 Frontal Area m^2 Frontal area, $m^2$ Conv, BEV, HEV, FCEV float fs_kwh Fuel Storage Energy Capacity kWh Fuel storage energy capacity, $kWh$ Conv, HEV, FCEV float fs_kwh_per_kg Fuel Specific Energy kWh/kg Fuel specific energy, $\\frac{kWh}{kg}$ Conv, HEV, FCEV float fs_max_kw Fuel Storage Max Power Output kW Fuel storage max power output, $kW$ Conv, HEV, FCEV float fs_secs_to_peak_pwr Fuel Storage Time to Peak Power s Fuel storage time to peak power, $s$ Conv, HEV, FCEV float glider_kg Vehicle Glider Mass kg Vehicle mass excluding cargo, passengers, and powertrain components, $kg$ Conv, BEV, HEV, FCEV float idle_fc_kw Fuel Converter Idle Power kW Fuel converter idle power, $kW$ Conv, HEV, FCEV float kw_demand_fc_on Power Demand for Fuel Converter ON kW Power demand above which to require fuel converter on, $kW$ Conv, HEV, FCEV float max_accel_buffer_mph Max Acceleration Buffer MPH Speed where the battery reserved for accelerating is zero Conv, BEV, HEV, FCEV float max_accel_buffer_perc_of_useable_soc Max Acceleration Buffer as % of Usuable SOC % Percent of usable battery energy reserved to help accelerate Conv, BEV, HEV, FCEV float max_regen Maximum Regenerative Braking Efficiency % Maximum brake regeneration efficiency BEV, HEV, FCEV float max_soc Maximum State of Charge % Traction battery maximum state of charge BEV, HEV, FCEV float mc_eff_map Motor Controller Efficiency Map % Electric motor efficiency map BEV, HEV, FCEV list [float] mc_max_kw Motor Controller Max Power kW Peak continuous electric motor power, $kW$ BEV, HEV, FCEV float mc_pe_base_kg Motor Controller Power Electronics Base Mass kg Motor power electronics base mass, $kg$ BEV, HEV, FCEV float mc_pe_kg_per_kw Motor Controller Power Electronics Mass Per Power kg/kW Motor power electronics mass per power output, $\\frac{kg}{kW}$ BEV, HEV, FCEV float mc_peak_eff_override Motor Controller Peak Efficiency Override % Motor efficiency peak override, scales entire curve BEV, HEV, FCEV float mc_pwr_out_perc Motor Controller Power Output Map % Electric motor output power percentage map, x values of\u00a0mc_eff_map BEV, HEV, FCEV list [float] mc_sec_to_peak_pwr Motor Controller Time to Peak Power s Electric motor time to peak power, $s$ BEV, HEV, FCEV float min_fc_time_on Minimum Fuel Converter Time On s Minimum time fuel converter must be on before shutoff (for HEV, PHEV) Conv, HEV, FCEV float min_soc Minimum State of Charge % Traction battery minimum state of charge BEV, HEV, FCEV float mph_fc_on Speed for Fuel Converter to Turn On MPH Speed at which the fuel converter must turn on, $mph$ Conv, HEV, FCEV float num_wheels Number of Wheels Number of wheels Conv, BEV, HEV, FCEV float perc_high_acc_buf Percentage of High Acceleration SOC Buffer % Percent SOC buffer for high accessory loads during cycles with long idle time Conv, BEV, HEV, FCEV float scenario_name Scenario Name Name of the vehicle and scenario - Includes names Conv, BEV, HEV, FCEV string selection Selection Index Name of the vehicle and scenario - Includes names Conv, BEV, HEV, FCEV int stop_start Stop/Start Flag Stop/start micro-HEV flag Conv, BEV, HEV, FCEV bool trans_eff Transmission Efficiency % Transmission efficiency Conv, BEV, HEV, FCEV float trans_kg Transmission Mass kg Transmission mass, $kg$ Conv, BEV, HEV, FCEV float veh_cg_m Vehicle Center of Gravity m Vehicle center of mass height, $m$\u00a0NOTE:\u00a0positive for FWD, negative for RWD, AWD, 4WD Conv, BEV, HEV, FCEV float veh_override_kg Vehicle Mass Override kg Total vehicle mass, overrides mass calculation, $kg$ Conv, BEV, HEV, FCEV float veh_pt_type Vehicle Powertrain Type Vehicle powertrain type, one of [CONV,\u00a0HEV,\u00a0PHEV,\u00a0BEV] Conv, BEV, HEV, FCEV string veh_year Vehicle Life yr Number of years to calculate TCO for - generally the expected life of the vehicle in years Conv, BEV, HEV, FCEV int wheel_base_m Vehicle wheelbase m Wheelbase, $m$ Conv, BEV, HEV, FCEV float wheel_coef_of_fric Wheel Coefficient of Friction Wheel coefficient of friction Conv, BEV, HEV, FCEV float wheel_inertia_kg_m2 Wheel Inertia kg/m^2 Mass moment of inertia per wheel, $kg \\cdot m^2$ Conv, BEV, HEV, FCEV float wheel_radius_m Wheel Radius m Wheel radius, $m$ Conv, BEV, HEV, FCEV float wheel_rr_coef Wheel Rolling Resistance Coefficient Rolling resistance coefficient Conv, BEV, HEV, FCEV float"}]}